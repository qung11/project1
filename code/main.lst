CCS PCM C Compiler, Version 5.101, 43599               09-Jun-23 04:09

               Filename:   C:\Users\quang\Desktop\DOAN1\code\main.lst

               ROM used:   4118 words (50%)
                           Largest free fragment is 2048
               RAM used:   47 (13%) at main() level
                           69 (19%) worst case
               Stack used: 7 locations (6 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  10
0001:  MOVWF  0A
0002:  GOTO   000
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  BTFSS  0B.5
0028:  GOTO   02B
0029:  BTFSC  0B.2
002A:  GOTO   04C
002B:  MOVF   22,W
002C:  MOVWF  04
002D:  MOVF   23,W
002E:  MOVWF  77
002F:  MOVF   24,W
0030:  MOVWF  78
0031:  MOVF   25,W
0032:  MOVWF  79
0033:  MOVF   26,W
0034:  MOVWF  7A
0035:  MOVF   27,W
0036:  BSF    03.6
0037:  MOVWF  0D
0038:  BCF    03.6
0039:  MOVF   28,W
003A:  BSF    03.6
003B:  MOVWF  0F
003C:  BCF    03.6
003D:  MOVF   29,W
003E:  BSF    03.6
003F:  MOVWF  0C
0040:  BCF    03.6
0041:  MOVF   2A,W
0042:  BSF    03.6
0043:  MOVWF  0E
0044:  BCF    03.6
0045:  MOVF   20,W
0046:  MOVWF  0A
0047:  SWAPF  21,W
0048:  MOVWF  03
0049:  SWAPF  7F,F
004A:  SWAPF  7F,W
004B:  RETFIE
004C:  BCF    0A.3
004D:  BCF    0A.4
004E:  GOTO   0CA
.................... #include <main.h>
.................... #include <16F877A.h>
.................... //////////// Standard Header file for the PIC16F877A device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F877A
004F:  BCF    0A.0
0050:  BCF    0A.1
0051:  BCF    0A.2
0052:  ADDWF  02,F
0053:  RETLW  28
0054:  RETLW  0C
0055:  RETLW  01
0056:  RETLW  06
0057:  DATA 20,10
0058:  DATA 20,10
0059:  DATA 20,22
005A:  DATA C9,29
005B:  DATA 50,26
005C:  DATA C1,2C
005D:  DATA 20,10
005E:  DATA 20,10
005F:  DATA 20,10
0060:  DATA 20,10
0061:  DATA 00,00
0062:  DATA 20,10
0063:  DATA 20,10
0064:  DATA A0,29
0065:  DATA 45,2A
0066:  DATA D4,24
0067:  DATA CE,23
0068:  DATA 20,10
0069:  DATA 20,10
006A:  DATA 20,10
006B:  DATA 20,10
006C:  DATA 00,01
006D:  DATA 20,10
006E:  DATA 20,10
006F:  DATA A0,26
0070:  DATA 41,27
0071:  DATA D5,20
0072:  DATA 4C,10
0073:  DATA 20,10
0074:  DATA 20,10
0075:  DATA 20,10
0076:  DATA 20,10
0077:  DATA 00,01
0078:  DATA 20,10
0079:  DATA 20,10
007A:  DATA A0,20
007B:  DATA 55,2A
007C:  DATA 4F,10
007D:  DATA 20,10
007E:  DATA 20,10
007F:  DATA 20,10
0080:  DATA 20,10
0081:  DATA 20,10
0082:  DATA 00,01
0083:  DATA 20,10
0084:  DATA 20,10
0085:  DATA 20,10
0086:  DATA 20,10
0087:  DATA 20,10
0088:  DATA 20,10
0089:  DATA 20,10
008A:  DATA 20,10
008B:  DATA 00,01
008C:  DATA 20,10
008D:  DATA 20,10
008E:  DATA 20,10
008F:  DATA 20,10
0090:  DATA 20,10
0091:  DATA 20,10
0092:  DATA 20,10
0093:  DATA 20,10
0094:  DATA 00,00
0095:  DATA 20,10
0096:  DATA 20,10
0097:  DATA AD,16
0098:  DATA A0,27
0099:  DATA 4E,10
009A:  DATA AD,16
009B:  DATA 20,10
009C:  DATA 20,00
009D:  DATA 20,10
009E:  DATA 20,10
009F:  DATA AD,16
00A0:  DATA A0,27
00A1:  DATA 46,23
00A2:  DATA A0,16
00A3:  DATA 2D,10
00A4:  DATA 20,00
00A5:  DATA 20,10
00A6:  DATA 20,10
00A7:  DATA AD,16
00A8:  DATA 20,23
00A9:  DATA 41,27
00AA:  DATA A0,16
00AB:  DATA 2D,10
00AC:  DATA 20,00
00AD:  DATA 20,10
00AE:  DATA 20,10
00AF:  DATA AD,16
00B0:  DATA 20,26
00B1:  DATA 45,22
00B2:  DATA A0,16
00B3:  DATA 2D,10
00B4:  DATA 20,00
00B5:  DATA 20,10
00B6:  DATA 20,10
00B7:  DATA 20,2A
00B8:  DATA 4F,28
00B9:  DATA 3A,00
00BA:  DATA 20,10
00BB:  DATA 20,10
00BC:  DATA 20,21
00BD:  DATA 4F,2A
00BE:  DATA 3A,00
00BF:  DATA 20,10
00C0:  DATA AD,16
00C1:  DATA 20,26
00C2:  DATA C9,23
00C3:  DATA 48,2A
00C4:  DATA A0,16
00C5:  DATA 2D,00
00C6:  DATA 20,10
00C7:  DATA D4,24
00C8:  DATA CD,22
00C9:  DATA 3A,00
*
00F2:  DATA C6,18
00F3:  DATA BA,27
00F4:  DATA 4E,10
00F5:  DATA 00,01
00F6:  DATA C6,18
00F7:  DATA BA,27
00F8:  DATA 46,23
00F9:  DATA 00,01
00FA:  DATA 46,19
00FB:  DATA BA,27
00FC:  DATA 4E,10
00FD:  DATA 00,01
00FE:  DATA 46,19
00FF:  DATA BA,27
0100:  DATA 46,23
0101:  DATA 00,01
0102:  DATA 4C,1D
0103:  DATA 4F,27
0104:  DATA 20,00
0105:  DATA 4C,1D
0106:  DATA 4F,23
0107:  DATA 46,00
0108:  DATA 20,10
0109:  DATA 20,10
010A:  DATA 20,22
010B:  DATA C9,29
010C:  DATA 50,26
010D:  DATA C1,2C
010E:  DATA 00,01
010F:  DATA 20,10
0110:  DATA 20,10
0111:  DATA A0,29
0112:  DATA 45,2A
0113:  DATA D4,24
0114:  DATA CE,23
0115:  DATA 00,01
0116:  DATA D4,32
0117:  DATA 6D,38
0118:  DATA BA,12
0119:  DATA 30,19
011A:  DATA 2E,18
011B:  DATA 66,00
011C:  DATA 43,00
011D:  DATA 20,10
011E:  DATA AD,16
011F:  DATA A0,26
0120:  DATA 41,27
0121:  DATA D5,20
0122:  DATA 4C,10
0123:  DATA AD,16
0124:  DATA 00,01
0125:  DATA 20,10
0126:  DATA 20,29
0127:  DATA C5,20
0128:  DATA C4,2C
0129:  DATA A0,10
012A:  DATA A1,10
012B:  DATA 20,10
012C:  DATA 00,01
012D:  DATA 20,10
012E:  DATA AD,16
012F:  DATA A0,26
0130:  DATA 41,27
0131:  DATA D5,20
0132:  DATA 4C,10
0133:  DATA AD,16
0134:  DATA 00,01
0135:  DATA 20,10
0136:  DATA A0,29
0137:  DATA C8,2A
0138:  DATA 54,22
0139:  DATA CF,2B
013A:  DATA 4E,10
013B:  DATA A1,10
013C:  DATA 21,00
013D:  DATA 2A,00
013E:  DATA 20,00
013F:  DATA 2A,00
0140:  DATA 20,00
*
028A:  MOVF   0B,W
028B:  MOVWF  47
028C:  BCF    0B.7
028D:  BSF    03.5
028E:  BSF    03.6
028F:  BSF    0C.7
0290:  BSF    0C.0
0291:  NOP
0292:  NOP
0293:  BCF    03.5
0294:  BCF    03.6
0295:  BTFSC  47.7
0296:  BSF    0B.7
0297:  BSF    03.6
0298:  MOVF   0C,W
0299:  ANDLW  7F
029A:  BTFSC  03.2
029B:  GOTO   2DE
029C:  BCF    03.6
029D:  MOVWF  47
029E:  BSF    03.6
029F:  MOVF   0D,W
02A0:  BCF    03.6
02A1:  MOVWF  48
02A2:  BSF    03.6
02A3:  MOVF   0F,W
02A4:  BCF    03.6
02A5:  MOVWF  49
02A6:  MOVF   47,W
02A7:  MOVWF  53
02A8:  CALL   266
02A9:  MOVF   48,W
02AA:  BSF    03.6
02AB:  MOVWF  0D
02AC:  BCF    03.6
02AD:  MOVF   49,W
02AE:  BSF    03.6
02AF:  MOVWF  0F
02B0:  BCF    03.6
02B1:  MOVF   0B,W
02B2:  MOVWF  4A
02B3:  BCF    0B.7
02B4:  BSF    03.5
02B5:  BSF    03.6
02B6:  BSF    0C.7
02B7:  BSF    0C.0
02B8:  NOP
02B9:  NOP
02BA:  BCF    03.5
02BB:  BCF    03.6
02BC:  BTFSC  4A.7
02BD:  BSF    0B.7
02BE:  BSF    03.6
02BF:  RLF    0C,W
02C0:  RLF    0E,W
02C1:  ANDLW  7F
02C2:  BTFSC  03.2
02C3:  GOTO   2DE
02C4:  BCF    03.6
02C5:  MOVWF  47
02C6:  BSF    03.6
02C7:  MOVF   0D,W
02C8:  BCF    03.6
02C9:  MOVWF  48
02CA:  BSF    03.6
02CB:  MOVF   0F,W
02CC:  BCF    03.6
02CD:  MOVWF  49
02CE:  MOVF   47,W
02CF:  MOVWF  53
02D0:  CALL   266
02D1:  MOVF   48,W
02D2:  BSF    03.6
02D3:  MOVWF  0D
02D4:  BCF    03.6
02D5:  MOVF   49,W
02D6:  BSF    03.6
02D7:  MOVWF  0F
02D8:  INCF   0D,F
02D9:  BTFSC  03.2
02DA:  INCF   0F,F
02DB:  BCF    03.6
02DC:  GOTO   28A
02DD:  BSF    03.6
02DE:  BCF    03.6
02DF:  RETURN
02E0:  MOVLW  8E
02E1:  MOVWF  77
02E2:  MOVF   49,W
02E3:  MOVWF  78
02E4:  MOVF   48,W
02E5:  MOVWF  79
02E6:  CLRF   7A
02E7:  MOVF   78,F
02E8:  BTFSS  03.2
02E9:  GOTO   2F4
02EA:  MOVF   79,W
02EB:  MOVWF  78
02EC:  CLRF   79
02ED:  MOVLW  08
02EE:  SUBWF  77,F
02EF:  MOVF   78,F
02F0:  BTFSS  03.2
02F1:  GOTO   2F4
02F2:  CLRF   77
02F3:  GOTO   2FC
02F4:  BCF    03.0
02F5:  BTFSC  78.7
02F6:  GOTO   2FB
02F7:  RLF    79,F
02F8:  RLF    78,F
02F9:  DECF   77,F
02FA:  GOTO   2F4
02FB:  BCF    78.7
02FC:  RETURN
02FD:  MOVF   53,W
02FE:  BTFSC  03.2
02FF:  GOTO   36D
0300:  MOVWF  5B
0301:  MOVF   57,W
0302:  BTFSC  03.2
0303:  GOTO   36D
0304:  ADDWF  5B,F
0305:  BTFSC  03.0
0306:  GOTO   30E
0307:  MOVLW  7F
0308:  SUBWF  5B,F
0309:  BTFSS  03.0
030A:  GOTO   36D
030B:  BTFSC  03.2
030C:  GOTO   36D
030D:  GOTO   312
030E:  MOVLW  81
030F:  ADDWF  5B,F
0310:  BTFSC  03.0
0311:  GOTO   36D
0312:  MOVF   5B,W
0313:  MOVWF  77
0314:  CLRF   78
0315:  CLRF   79
0316:  CLRF   7A
0317:  MOVF   54,W
0318:  MOVWF  5F
0319:  BSF    5F.7
031A:  MOVF   55,W
031B:  MOVWF  5E
031C:  MOVF   56,W
031D:  MOVWF  5D
031E:  MOVLW  18
031F:  MOVWF  5B
0320:  CLRF   5C
0321:  BTFSS  5D.0
0322:  GOTO   33B
0323:  MOVF   5A,W
0324:  ADDWF  7A,F
0325:  BTFSS  03.0
0326:  GOTO   32D
0327:  INCF   79,F
0328:  BTFSS  03.2
0329:  GOTO   32D
032A:  INCF   78,F
032B:  BTFSC  03.2
032C:  BSF    5C.7
032D:  MOVF   59,W
032E:  ADDWF  79,F
032F:  BTFSS  03.0
0330:  GOTO   334
0331:  INCF   78,F
0332:  BTFSC  03.2
0333:  BSF    5C.7
0334:  MOVF   58,W
0335:  MOVWF  55
0336:  BSF    55.7
0337:  MOVF   55,W
0338:  ADDWF  78,F
0339:  BTFSC  03.0
033A:  BSF    5C.7
033B:  RLF    5C,F
033C:  RRF    78,F
033D:  RRF    79,F
033E:  RRF    7A,F
033F:  RRF    5F,F
0340:  RRF    5E,F
0341:  RRF    5D,F
0342:  BCF    03.0
0343:  DECFSZ 5B,F
0344:  GOTO   320
0345:  MOVLW  01
0346:  ADDWF  77,F
0347:  BTFSC  03.0
0348:  GOTO   36D
0349:  BTFSC  78.7
034A:  GOTO   352
034B:  RLF    5F,F
034C:  RLF    7A,F
034D:  RLF    79,F
034E:  RLF    78,F
034F:  DECF   77,F
0350:  BTFSC  03.2
0351:  GOTO   36D
0352:  BTFSS  5F.7
0353:  GOTO   363
0354:  INCF   7A,F
0355:  BTFSS  03.2
0356:  GOTO   363
0357:  INCF   79,F
0358:  BTFSS  03.2
0359:  GOTO   363
035A:  INCF   78,F
035B:  BTFSS  03.2
035C:  GOTO   363
035D:  RRF    78,F
035E:  RRF    79,F
035F:  RRF    7A,F
0360:  INCF   77,F
0361:  BTFSC  03.2
0362:  GOTO   36D
0363:  MOVF   54,W
0364:  MOVWF  5C
0365:  MOVF   58,W
0366:  XORWF  5C,F
0367:  BTFSS  5C.7
0368:  GOTO   36B
0369:  BSF    78.7
036A:  GOTO   371
036B:  BCF    78.7
036C:  GOTO   371
036D:  CLRF   77
036E:  CLRF   78
036F:  CLRF   79
0370:  CLRF   7A
0371:  RETURN
0372:  MOVF   4A,W
0373:  BTFSC  03.2
0374:  GOTO   437
0375:  MOVWF  56
0376:  MOVF   4E,W
0377:  BTFSC  03.2
0378:  GOTO   437
0379:  SUBWF  56,F
037A:  BTFSS  03.0
037B:  GOTO   381
037C:  MOVLW  7F
037D:  ADDWF  56,F
037E:  BTFSC  03.0
037F:  GOTO   437
0380:  GOTO   387
0381:  MOVLW  81
0382:  SUBWF  56,F
0383:  BTFSS  03.0
0384:  GOTO   437
0385:  BTFSC  03.2
0386:  GOTO   437
0387:  MOVF   56,W
0388:  MOVWF  77
0389:  CLRF   78
038A:  CLRF   79
038B:  CLRF   7A
038C:  CLRF   55
038D:  MOVF   4B,W
038E:  MOVWF  54
038F:  BSF    54.7
0390:  MOVF   4C,W
0391:  MOVWF  53
0392:  MOVF   4D,W
0393:  MOVWF  52
0394:  MOVLW  19
0395:  MOVWF  56
0396:  MOVF   51,W
0397:  SUBWF  52,F
0398:  BTFSC  03.0
0399:  GOTO   3AA
039A:  MOVLW  01
039B:  SUBWF  53,F
039C:  BTFSC  03.0
039D:  GOTO   3AA
039E:  SUBWF  54,F
039F:  BTFSC  03.0
03A0:  GOTO   3AA
03A1:  SUBWF  55,F
03A2:  BTFSC  03.0
03A3:  GOTO   3AA
03A4:  INCF   55,F
03A5:  INCF   54,F
03A6:  INCF   53,F
03A7:  MOVF   51,W
03A8:  ADDWF  52,F
03A9:  GOTO   3DC
03AA:  MOVF   50,W
03AB:  SUBWF  53,F
03AC:  BTFSC  03.0
03AD:  GOTO   3C5
03AE:  MOVLW  01
03AF:  SUBWF  54,F
03B0:  BTFSC  03.0
03B1:  GOTO   3C5
03B2:  SUBWF  55,F
03B3:  BTFSC  03.0
03B4:  GOTO   3C5
03B5:  INCF   55,F
03B6:  INCF   54,F
03B7:  MOVF   50,W
03B8:  ADDWF  53,F
03B9:  MOVF   51,W
03BA:  ADDWF  52,F
03BB:  BTFSS  03.0
03BC:  GOTO   3DC
03BD:  INCF   53,F
03BE:  BTFSS  03.2
03BF:  GOTO   3DC
03C0:  INCF   54,F
03C1:  BTFSS  03.2
03C2:  GOTO   3DC
03C3:  INCF   55,F
03C4:  GOTO   3DC
03C5:  MOVF   4F,W
03C6:  IORLW  80
03C7:  SUBWF  54,F
03C8:  BTFSC  03.0
03C9:  GOTO   3DB
03CA:  MOVLW  01
03CB:  SUBWF  55,F
03CC:  BTFSC  03.0
03CD:  GOTO   3DB
03CE:  INCF   55,F
03CF:  MOVF   4F,W
03D0:  IORLW  80
03D1:  ADDWF  54,F
03D2:  MOVF   50,W
03D3:  ADDWF  53,F
03D4:  BTFSS  03.0
03D5:  GOTO   3B9
03D6:  INCF   54,F
03D7:  BTFSS  03.2
03D8:  GOTO   3B9
03D9:  INCF   55,F
03DA:  GOTO   3B9
03DB:  BSF    7A.0
03DC:  DECFSZ 56,F
03DD:  GOTO   3DF
03DE:  GOTO   3EA
03DF:  BCF    03.0
03E0:  RLF    52,F
03E1:  RLF    53,F
03E2:  RLF    54,F
03E3:  RLF    55,F
03E4:  BCF    03.0
03E5:  RLF    7A,F
03E6:  RLF    79,F
03E7:  RLF    78,F
03E8:  RLF    57,F
03E9:  GOTO   396
03EA:  BTFSS  57.0
03EB:  GOTO   3F2
03EC:  BCF    03.0
03ED:  RRF    78,F
03EE:  RRF    79,F
03EF:  RRF    7A,F
03F0:  RRF    57,F
03F1:  GOTO   3F5
03F2:  DECF   77,F
03F3:  BTFSC  03.2
03F4:  GOTO   437
03F5:  BTFSC  57.7
03F6:  GOTO   41E
03F7:  BCF    03.0
03F8:  RLF    52,F
03F9:  RLF    53,F
03FA:  RLF    54,F
03FB:  RLF    55,F
03FC:  MOVF   51,W
03FD:  SUBWF  52,F
03FE:  BTFSC  03.0
03FF:  GOTO   40A
0400:  MOVLW  01
0401:  SUBWF  53,F
0402:  BTFSC  03.0
0403:  GOTO   40A
0404:  SUBWF  54,F
0405:  BTFSC  03.0
0406:  GOTO   40A
0407:  SUBWF  55,F
0408:  BTFSS  03.0
0409:  GOTO   42D
040A:  MOVF   50,W
040B:  SUBWF  53,F
040C:  BTFSC  03.0
040D:  GOTO   415
040E:  MOVLW  01
040F:  SUBWF  54,F
0410:  BTFSC  03.0
0411:  GOTO   415
0412:  SUBWF  55,F
0413:  BTFSS  03.0
0414:  GOTO   42D
0415:  MOVF   4F,W
0416:  IORLW  80
0417:  SUBWF  54,F
0418:  BTFSC  03.0
0419:  GOTO   41E
041A:  MOVLW  01
041B:  SUBWF  55,F
041C:  BTFSS  03.0
041D:  GOTO   42D
041E:  INCF   7A,F
041F:  BTFSS  03.2
0420:  GOTO   42D
0421:  INCF   79,F
0422:  BTFSS  03.2
0423:  GOTO   42D
0424:  INCF   78,F
0425:  BTFSS  03.2
0426:  GOTO   42D
0427:  INCF   77,F
0428:  BTFSC  03.2
0429:  GOTO   437
042A:  RRF    78,F
042B:  RRF    79,F
042C:  RRF    7A,F
042D:  MOVF   4B,W
042E:  MOVWF  56
042F:  MOVF   4F,W
0430:  XORWF  56,F
0431:  BTFSS  56.7
0432:  GOTO   435
0433:  BSF    78.7
0434:  GOTO   43B
0435:  BCF    78.7
0436:  GOTO   43B
0437:  CLRF   77
0438:  CLRF   78
0439:  CLRF   79
043A:  CLRF   7A
043B:  RETURN
*
04C6:  MOVF   0B,W
04C7:  MOVWF  47
04C8:  BCF    0B.7
04C9:  BSF    03.5
04CA:  BSF    03.6
04CB:  BSF    0C.7
04CC:  BSF    0C.0
04CD:  NOP
04CE:  NOP
04CF:  BCF    03.5
04D0:  BCF    03.6
04D1:  BTFSC  47.7
04D2:  BSF    0B.7
04D3:  BTFSC  03.0
04D4:  GOTO   4FD
04D5:  BSF    03.6
04D6:  MOVF   0C,W
04D7:  ANDLW  7F
04D8:  BCF    03.6
04D9:  MOVWF  47
04DA:  BSF    03.6
04DB:  MOVF   0D,W
04DC:  BCF    03.6
04DD:  MOVWF  48
04DE:  BSF    03.6
04DF:  MOVF   0F,W
04E0:  BCF    03.6
04E1:  MOVWF  49
04E2:  MOVF   47,W
04E3:  MOVWF  53
04E4:  CALL   266
04E5:  MOVF   48,W
04E6:  BSF    03.6
04E7:  MOVWF  0D
04E8:  BCF    03.6
04E9:  MOVF   49,W
04EA:  BSF    03.6
04EB:  MOVWF  0F
04EC:  BCF    03.6
04ED:  MOVF   0B,W
04EE:  MOVWF  4A
04EF:  BCF    0B.7
04F0:  BSF    03.5
04F1:  BSF    03.6
04F2:  BSF    0C.7
04F3:  BSF    0C.0
04F4:  NOP
04F5:  NOP
04F6:  BCF    03.5
04F7:  BCF    03.6
04F8:  BTFSC  4A.7
04F9:  BSF    0B.7
04FA:  DECFSZ 46,F
04FB:  GOTO   4FD
04FC:  GOTO   51C
04FD:  BSF    03.6
04FE:  RLF    0C,W
04FF:  RLF    0E,W
0500:  ANDLW  7F
0501:  BCF    03.6
0502:  MOVWF  47
0503:  BSF    03.6
0504:  MOVF   0D,W
0505:  BCF    03.6
0506:  MOVWF  48
0507:  BSF    03.6
0508:  MOVF   0F,W
0509:  BCF    03.6
050A:  MOVWF  49
050B:  MOVF   47,W
050C:  MOVWF  53
050D:  CALL   266
050E:  MOVF   48,W
050F:  BSF    03.6
0510:  MOVWF  0D
0511:  BCF    03.6
0512:  MOVF   49,W
0513:  BSF    03.6
0514:  MOVWF  0F
0515:  INCF   0D,F
0516:  BTFSC  03.2
0517:  INCF   0F,F
0518:  BCF    03.0
0519:  BCF    03.6
051A:  DECFSZ 46,F
051B:  GOTO   4C6
051C:  BCF    0A.3
051D:  BSF    0A.4
051E:  GOTO   192 (RETURN)
051F:  BTFSC  03.1
0520:  GOTO   524
0521:  MOVLW  5B
0522:  MOVWF  04
0523:  BCF    03.7
0524:  CLRF   77
0525:  CLRF   78
0526:  CLRF   79
0527:  CLRF   7A
0528:  CLRF   5B
0529:  CLRF   5C
052A:  CLRF   5D
052B:  CLRF   5E
052C:  MOVF   5A,W
052D:  IORWF  59,W
052E:  IORWF  58,W
052F:  IORWF  57,W
0530:  BTFSC  03.2
0531:  GOTO   562
0532:  MOVLW  20
0533:  MOVWF  5F
0534:  BCF    03.0
0535:  RLF    53,F
0536:  RLF    54,F
0537:  RLF    55,F
0538:  RLF    56,F
0539:  RLF    5B,F
053A:  RLF    5C,F
053B:  RLF    5D,F
053C:  RLF    5E,F
053D:  MOVF   5A,W
053E:  SUBWF  5E,W
053F:  BTFSS  03.2
0540:  GOTO   54B
0541:  MOVF   59,W
0542:  SUBWF  5D,W
0543:  BTFSS  03.2
0544:  GOTO   54B
0545:  MOVF   58,W
0546:  SUBWF  5C,W
0547:  BTFSS  03.2
0548:  GOTO   54B
0549:  MOVF   57,W
054A:  SUBWF  5B,W
054B:  BTFSS  03.0
054C:  GOTO   55C
054D:  MOVF   57,W
054E:  SUBWF  5B,F
054F:  MOVF   58,W
0550:  BTFSS  03.0
0551:  INCFSZ 58,W
0552:  SUBWF  5C,F
0553:  MOVF   59,W
0554:  BTFSS  03.0
0555:  INCFSZ 59,W
0556:  SUBWF  5D,F
0557:  MOVF   5A,W
0558:  BTFSS  03.0
0559:  INCFSZ 5A,W
055A:  SUBWF  5E,F
055B:  BSF    03.0
055C:  RLF    77,F
055D:  RLF    78,F
055E:  RLF    79,F
055F:  RLF    7A,F
0560:  DECFSZ 5F,F
0561:  GOTO   534
0562:  MOVF   5B,W
0563:  MOVWF  00
0564:  INCF   04,F
0565:  MOVF   5C,W
0566:  MOVWF  00
0567:  INCF   04,F
0568:  MOVF   5D,W
0569:  MOVWF  00
056A:  INCF   04,F
056B:  MOVF   5E,W
056C:  MOVWF  00
056D:  RETURN
056E:  MOVF   04,W
056F:  MOVWF  4B
0570:  MOVF   4A,W
0571:  MOVWF  4D
0572:  BTFSC  03.2
0573:  GOTO   58D
0574:  MOVF   49,W
0575:  MOVWF  56
0576:  MOVF   48,W
0577:  MOVWF  55
0578:  MOVF   47,W
0579:  MOVWF  54
057A:  MOVF   46,W
057B:  MOVWF  53
057C:  CLRF   5A
057D:  CLRF   59
057E:  MOVLW  20
057F:  MOVWF  58
0580:  MOVLW  82
0581:  MOVWF  57
0582:  CALL   2FD
0583:  MOVF   7A,W
0584:  MOVWF  49
0585:  MOVF   79,W
0586:  MOVWF  48
0587:  MOVF   78,W
0588:  MOVWF  47
0589:  MOVF   77,W
058A:  MOVWF  46
058B:  DECFSZ 4D,F
058C:  GOTO   574
058D:  MOVF   49,W
058E:  MOVWF  56
058F:  MOVF   48,W
0590:  MOVWF  55
0591:  MOVF   47,W
0592:  MOVWF  54
0593:  MOVF   46,W
0594:  MOVWF  53
0595:  MOVF   53,W
0596:  SUBLW  B6
0597:  MOVWF  53
0598:  CLRF   7A
0599:  MOVF   54,W
059A:  MOVWF  57
059B:  BSF    54.7
059C:  BCF    03.0
059D:  RRF    54,F
059E:  RRF    55,F
059F:  RRF    56,F
05A0:  RRF    7A,F
05A1:  RRF    79,F
05A2:  RRF    78,F
05A3:  RRF    77,F
05A4:  DECFSZ 53,F
05A5:  GOTO   59C
05A6:  BTFSS  57.7
05A7:  GOTO   5B3
05A8:  COMF   77,F
05A9:  COMF   78,F
05AA:  COMF   79,F
05AB:  COMF   7A,F
05AC:  INCF   77,F
05AD:  BTFSC  03.2
05AE:  INCF   78,F
05AF:  BTFSC  03.2
05B0:  INCF   79,F
05B1:  BTFSC  03.2
05B2:  INCF   7A,F
05B3:  MOVF   7A,W
05B4:  MOVWF  49
05B5:  MOVF   79,W
05B6:  MOVWF  48
05B7:  MOVF   78,W
05B8:  MOVWF  47
05B9:  MOVF   77,W
05BA:  MOVWF  46
05BB:  BTFSS  49.7
05BC:  GOTO   5CA
05BD:  DECF   4B,F
05BE:  BSF    4B.5
05BF:  COMF   46,F
05C0:  COMF   47,F
05C1:  COMF   48,F
05C2:  COMF   49,F
05C3:  INCF   46,F
05C4:  BTFSC  03.2
05C5:  INCF   47,F
05C6:  BTFSC  03.2
05C7:  INCF   48,F
05C8:  BTFSC  03.2
05C9:  INCF   49,F
05CA:  MOVLW  3B
05CB:  MOVWF  52
05CC:  MOVLW  9A
05CD:  MOVWF  51
05CE:  MOVLW  CA
05CF:  MOVWF  50
05D0:  CLRF   4F
05D1:  MOVLW  0A
05D2:  MOVWF  4D
05D3:  MOVF   4A,W
05D4:  BTFSC  03.2
05D5:  INCF   4B,F
05D6:  BSF    03.1
05D7:  MOVLW  46
05D8:  MOVWF  04
05D9:  BCF    03.7
05DA:  MOVF   49,W
05DB:  MOVWF  56
05DC:  MOVF   48,W
05DD:  MOVWF  55
05DE:  MOVF   47,W
05DF:  MOVWF  54
05E0:  MOVF   46,W
05E1:  MOVWF  53
05E2:  MOVF   52,W
05E3:  MOVWF  5A
05E4:  MOVF   51,W
05E5:  MOVWF  59
05E6:  MOVF   50,W
05E7:  MOVWF  58
05E8:  MOVF   4F,W
05E9:  MOVWF  57
05EA:  CALL   51F
05EB:  MOVF   78,W
05EC:  MOVF   77,F
05ED:  BTFSS  03.2
05EE:  GOTO   602
05EF:  INCF   4A,W
05F0:  SUBWF  4D,W
05F1:  BTFSC  03.2
05F2:  GOTO   602
05F3:  MOVF   4B,W
05F4:  BTFSC  03.2
05F5:  GOTO   604
05F6:  ANDLW  0F
05F7:  SUBWF  4D,W
05F8:  BTFSC  03.2
05F9:  GOTO   5FC
05FA:  BTFSC  03.0
05FB:  GOTO   634
05FC:  BTFSC  4B.7
05FD:  GOTO   634
05FE:  BTFSC  4B.6
05FF:  GOTO   604
0600:  MOVLW  20
0601:  GOTO   630
0602:  MOVLW  20
0603:  ANDWF  4B,F
0604:  BTFSS  4B.5
0605:  GOTO   612
0606:  BCF    4B.5
0607:  MOVF   4A,W
0608:  BTFSS  03.2
0609:  DECF   4B,F
060A:  MOVF   77,W
060B:  MOVWF  4B
060C:  MOVLW  2D
060D:  MOVWF  53
060E:  CALL   266
060F:  MOVF   4B,W
0610:  MOVWF  77
0611:  CLRF   4B
0612:  MOVF   4A,W
0613:  SUBWF  4D,W
0614:  BTFSS  03.2
0615:  GOTO   620
0616:  MOVF   77,W
0617:  MOVWF  4B
0618:  MOVLW  2E
0619:  MOVWF  53
061A:  CALL   266
061B:  MOVF   4B,W
061C:  MOVWF  77
061D:  MOVLW  20
061E:  ANDWF  4B,F
061F:  MOVLW  00
0620:  MOVLW  30
0621:  BTFSS  4B.5
0622:  GOTO   630
0623:  BCF    4B.5
0624:  MOVF   4A,W
0625:  BTFSS  03.2
0626:  DECF   4B,F
0627:  MOVF   77,W
0628:  MOVWF  4B
0629:  MOVLW  2D
062A:  MOVWF  53
062B:  CALL   266
062C:  MOVF   4B,W
062D:  MOVWF  77
062E:  CLRF   4B
062F:  MOVLW  30
0630:  ADDWF  77,F
0631:  MOVF   77,W
0632:  MOVWF  53
0633:  CALL   266
0634:  BCF    03.1
0635:  MOVF   52,W
0636:  MOVWF  56
0637:  MOVF   51,W
0638:  MOVWF  55
0639:  MOVF   50,W
063A:  MOVWF  54
063B:  MOVF   4F,W
063C:  MOVWF  53
063D:  CLRF   5A
063E:  CLRF   59
063F:  CLRF   58
0640:  MOVLW  0A
0641:  MOVWF  57
0642:  CALL   51F
0643:  MOVF   7A,W
0644:  MOVWF  52
0645:  MOVF   79,W
0646:  MOVWF  51
0647:  MOVF   78,W
0648:  MOVWF  50
0649:  MOVF   77,W
064A:  MOVWF  4F
064B:  DECFSZ 4D,F
064C:  GOTO   5D6
064D:  BCF    0A.3
064E:  BSF    0A.4
064F:  GOTO   1A0 (RETURN)
*
06AF:  MOVF   49,W
06B0:  MOVWF  50
06B1:  MOVF   4D,W
06B2:  XORWF  50,F
06B3:  BTFSS  50.7
06B4:  GOTO   6BA
06B5:  BCF    03.2
06B6:  BCF    03.0
06B7:  BTFSC  49.7
06B8:  BSF    03.0
06B9:  GOTO   6ED
06BA:  MOVF   49,W
06BB:  MOVWF  50
06BC:  MOVF   4C,W
06BD:  MOVWF  51
06BE:  MOVF   48,W
06BF:  SUBWF  51,F
06C0:  BTFSC  03.2
06C1:  GOTO   6C8
06C2:  BTFSS  50.7
06C3:  GOTO   6ED
06C4:  MOVF   03,W
06C5:  XORLW  01
06C6:  MOVWF  03
06C7:  GOTO   6ED
06C8:  MOVF   4D,W
06C9:  MOVWF  51
06CA:  MOVF   49,W
06CB:  SUBWF  51,F
06CC:  BTFSC  03.2
06CD:  GOTO   6D4
06CE:  BTFSS  50.7
06CF:  GOTO   6ED
06D0:  MOVF   03,W
06D1:  XORLW  01
06D2:  MOVWF  03
06D3:  GOTO   6ED
06D4:  MOVF   4E,W
06D5:  MOVWF  51
06D6:  MOVF   4A,W
06D7:  SUBWF  51,F
06D8:  BTFSC  03.2
06D9:  GOTO   6E0
06DA:  BTFSS  50.7
06DB:  GOTO   6ED
06DC:  MOVF   03,W
06DD:  XORLW  01
06DE:  MOVWF  03
06DF:  GOTO   6ED
06E0:  MOVF   4F,W
06E1:  MOVWF  51
06E2:  MOVF   4B,W
06E3:  SUBWF  51,F
06E4:  BTFSC  03.2
06E5:  GOTO   6EC
06E6:  BTFSS  50.7
06E7:  GOTO   6ED
06E8:  MOVF   03,W
06E9:  XORLW  01
06EA:  MOVWF  03
06EB:  GOTO   6ED
06EC:  BCF    03.0
06ED:  RETURN
*
078B:  MOVF   4D,W
078C:  CLRF   78
078D:  SUBWF  4C,W
078E:  BTFSC  03.0
078F:  GOTO   793
0790:  MOVF   4C,W
0791:  MOVWF  77
0792:  GOTO   79F
0793:  CLRF   77
0794:  MOVLW  08
0795:  MOVWF  4E
0796:  RLF    4C,F
0797:  RLF    77,F
0798:  MOVF   4D,W
0799:  SUBWF  77,W
079A:  BTFSC  03.0
079B:  MOVWF  77
079C:  RLF    78,F
079D:  DECFSZ 4E,F
079E:  GOTO   796
079F:  RETURN
07A0:  MOVLW  20
07A1:  BTFSS  47.4
07A2:  MOVLW  30
07A3:  MOVWF  48
07A4:  MOVF   46,W
07A5:  MOVWF  77
07A6:  BTFSS  46.7
07A7:  GOTO   7B0
07A8:  COMF   77,F
07A9:  INCF   77,F
07AA:  MOVF   77,W
07AB:  MOVWF  46
07AC:  MOVLW  2D
07AD:  MOVWF  48
07AE:  BSF    47.7
07AF:  BSF    47.0
07B0:  MOVF   46,W
07B1:  MOVWF  4C
07B2:  MOVLW  64
07B3:  MOVWF  4D
07B4:  CALL   78B
07B5:  MOVF   77,W
07B6:  MOVWF  46
07B7:  MOVLW  30
07B8:  ADDWF  78,W
07B9:  MOVWF  49
07BA:  MOVF   46,W
07BB:  MOVWF  4C
07BC:  MOVLW  0A
07BD:  MOVWF  4D
07BE:  CALL   78B
07BF:  MOVLW  30
07C0:  ADDWF  77,W
07C1:  MOVWF  4B
07C2:  MOVLW  30
07C3:  ADDWF  78,W
07C4:  MOVWF  4A
07C5:  MOVF   48,W
07C6:  MOVWF  77
07C7:  MOVLW  30
07C8:  SUBWF  49,W
07C9:  BTFSC  03.2
07CA:  GOTO   7CF
07CB:  BSF    47.1
07CC:  BTFSC  47.7
07CD:  BSF    47.2
07CE:  GOTO   7E3
07CF:  MOVF   48,W
07D0:  MOVWF  49
07D1:  MOVLW  20
07D2:  MOVWF  48
07D3:  MOVLW  30
07D4:  SUBWF  4A,W
07D5:  BTFSC  03.2
07D6:  GOTO   7DB
07D7:  BSF    47.0
07D8:  BTFSC  47.7
07D9:  BSF    47.1
07DA:  GOTO   7E3
07DB:  BTFSS  03.2
07DC:  BSF    47.0
07DD:  BTFSS  03.2
07DE:  GOTO   7E3
07DF:  MOVF   49,W
07E0:  MOVWF  4A
07E1:  MOVLW  20
07E2:  MOVWF  49
07E3:  BTFSC  47.2
07E4:  GOTO   7EA
07E5:  BTFSC  47.1
07E6:  GOTO   7ED
07E7:  BTFSC  47.0
07E8:  GOTO   7F0
07E9:  GOTO   7F3
07EA:  MOVF   48,W
07EB:  MOVWF  53
07EC:  CALL   266
07ED:  MOVF   49,W
07EE:  MOVWF  53
07EF:  CALL   266
07F0:  MOVF   4A,W
07F1:  MOVWF  53
07F2:  CALL   266
07F3:  MOVF   4B,W
07F4:  MOVWF  53
07F5:  CALL   266
07F6:  RETURN
.................... 
.................... #list
.................... 
.................... #device ADC=10
.................... 
.................... #FUSES NOWDT                    //No Watch Dog Timer
.................... #FUSES NOBROWNOUT               //No brownout reset
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O
.................... #FUSES HS
.................... #use delay(crystal=20000000)
.................... #include <lcd.h>
.................... #define _lcd_h_
.................... #include <math.h>
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            ////
.................... //// This source code may only be used by licensed users of the CCS C   ////
.................... //// compiler.  This source code may only be distributed to other       ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  ////
.................... //// or distribution is permitted without written permission.           ////
.................... //// Derivative programs created using this software in object code     ////
.................... //// form are not restricted in any way.                                ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////                                                                    ////
.................... //// History:                                                           ////
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              ////
.................... ////                 The code now is small, much faster,                ////
.................... ////                 and more accurate.                                 ////
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   ////
.................... ////                 not return generic (int8 *) so type cast is done   ////
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication ////
.................... ////                 by its inverse to improve computation speed        ////
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   ////
.................... ////                 Updated routines include 64 bit versions of cos,   ////
.................... ////                 asin,atan,exp,log and dependant functions          ////
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    ////
.................... ////                 and log function                                   ////
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values ////
.................... ////                 greater then 10000000 and less then -10000000      ////
.................... ////                                                                    ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef MATH_H
.................... #define MATH_H
.................... 
.................... #ifdef PI
.................... #undef  PI
.................... #endif
.................... #define PI     3.1415926535897932
.................... 
.................... 
.................... #define SQRT2  1.4142135623730950
.................... 
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279};
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718};
.................... 
.................... ///////////////////////////// Round Functions //////////////////////////////
.................... 
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n)
.................... {
....................    float32 y, res;
....................    unsigned int16 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float32)(unsigned int16)y;
.................... 
....................  else if (y < 10000000.0)
....................    { 
....................       l = (unsigned int16)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float32)l);
....................       res = 32768.0*(float32)l;
....................       res += (float32)(unsigned int16)y;
....................    }
.................... 
....................  else
....................   res = y;
.................... 
....................  y = y - (float32)(unsigned int16)y;
.................... 
....................  if (s)
....................   res = -res;
.................... 
....................  if (y != 0)
....................  {
....................   if (s == 1 && n == 0)
....................    res -= 1.0;
.................... 
....................   if (s == 0 && n == 1)
....................    res += 1.0;
....................  }
....................  if (x == 0)
....................     res = 0;
.................... 
....................  return (res);
.................... }
.................... 
.................... // Overloaded Functions to take care for new Data types in PCD
.................... // Overloaded function CEIL_FLOOR() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n)
.................... {
....................    float48 y, res;
....................    unsigned int32 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float48)(unsigned int16)y;
.................... 
....................    else if (y < 549755813888.0)
....................    {
....................       l = (unsigned int32)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float48)l);
....................       res = 32768.0*(float48)l;
....................       res += (float48)(unsigned int16)y;
....................    }
....................    else
....................    {  
....................       res = y;
....................       y = 0.0;
....................    }
....................    
....................    if(y != 0)
....................       y = y - (float48)(unsigned int16)y;
.................... 
....................    if (s)
....................       res = -res;
.................... 
....................    if (y != 0)
....................    {
....................       if (s == 1 && n == 0)
....................          res -= 1.0;
.................... 
....................       if (s == 0 && n == 1)
....................          res += 1.0;
....................    }
....................    if (x == 0)
....................       res = 0;
.................... 
....................    return (res);
.................... }
.................... 
.................... 
.................... // Overloaded function CEIL_FLOOR() for data type - Float64
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n)
.................... {
....................    float64 y, res;
....................    int64 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float64)(unsigned int16)y;
....................    else if (y < 4503599627370496.0)
....................    {
....................       l = (int64)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float64)l);
....................       res = 32768.0*(float64)l;
....................       res += (float64)(unsigned int16)y;
....................    }
....................    else
....................    {
....................       res = y;
....................       y = 0.0;
....................    }
....................    
....................    if(y != 0)
....................       y = y - (float64)(unsigned int16)y;
.................... 
....................    if (s)
....................       res = -res;
.................... 
....................    if (y != 0)
....................    {
....................       if (s == 1 && n == 0)
....................          res -= 1.0;
.................... 
....................       if (s == 0 && n == 1)
....................          res += 1.0;
....................    }
....................    
....................    if (x == 0)
....................       res = 0;
.................... 
....................    return (res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float floor(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : rounds down the number x.
.................... // Date : N/A
.................... //
.................... float32 floor(float32 x)
.................... {
....................    return CEIL_FLOOR(x,0);
.................... }
.................... // Following 2 functions are overloaded functions of floor() for PCD
.................... // Overloaded function floor() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 floor(float48 x)
.................... {
....................    return CEIL_FLOOR(x, 0);
.................... }
.................... 
.................... // Overloaded function floor() for data type - Float64
.................... float64 floor(float64 x)
.................... {
....................    return CEIL_FLOOR(x, 0);
.................... }
.................... #endif
.................... 
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float ceil(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : rounds up the number x.
.................... // Date : N/A
.................... //
.................... float32 ceil(float32 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... // Following 2 functions are overloaded functions of ceil() for PCD
.................... // Overloaded function ceil() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 ceil(float48 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... 
.................... // Overloaded function ceil() for data type - Float64
.................... float64 ceil(float64 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... #endif
.................... 
....................  ////////////////////////////////////////////////////////////////////////////
.................... //   float fabs(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the absolute value of floating point number x
.................... // Returns : returns the absolute value of x
.................... // Date : N/A
.................... //
.................... #define fabs abs
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float fmod(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the floating point remainder of x/y
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the
.................... // magnitude of y. If y is zero then a domain error occurs.
.................... // Date : N/A
.................... //
.................... 
.................... float fmod(float32 x,float32 y)
.................... {
....................    float32 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... //Overloaded function for fmod() for PCD
.................... // Overloaded function fmod() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 fmod(float48 x,float48 y)
.................... {
....................    float48 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... // Overloaded function fmod() for data type - Float64
.................... float64 fmod(float64 x,float64 y)
.................... {
....................    float64 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... #endif
.................... //////////////////// Exponential and logarithmic functions ////////////////////
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float exp(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (e^x)
.................... // Date : N/A
.................... //
.................... #define LN2 0.6931471805599453
.................... #define LN2_INV 1.4426950408889634073
.................... 
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093,
....................                      0.0554965651,  0.240227138,  0.693147172};
.................... 
.................... 
.................... float32 exp(float32 x)
.................... {
....................    float32 y, res, r;
....................    #if defined(__PCD__)
....................    int8 data1;
....................    #endif
....................    signed int8 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 88.722838)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    n = (signed int16)(x*LN2_INV);
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... #if !defined(__PCD__)
....................    *((unsigned int8 *)(&res)) = n + 0x7F;
.................... #endif
.................... 
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD
....................    data1 = n+0x7F;
....................    if(bit_test(data1,0))
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7);
....................    rotate_right(&data1,1);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&res)+3)) = data1;
.................... #endif
.................... 
....................    y = y*LN2_INV - (float32)n;
.................... 
....................    r = pe[0]*y + pe[1];
....................    r = r*y + pe[2];
....................    r = r*y + pe[3];
....................    r = r*y + pe[4];
....................    r = r*y + pe[5];
.................... 
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... 
.................... 
.................... //Overloaded function for exp() for PCD
.................... // Overloaded function exp() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 exp(float48 x)
.................... {
....................    float48 y, res, r;
....................    int8 data1;
....................    signed int8 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 88.722838)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    n = (signed int16)(x*LN2_INV);
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... 
....................    data1 = n+0x7F;
....................    if(bit_test(data1,0))
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7);
....................    rotate_right(&data1,1);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&res)+5)) = data1;
.................... 
....................    y = y*LN2_INV - (float48)n;
.................... 
....................    r = pe[0]*y + pe[1];
....................    r = r*y + pe[2];
....................    r = r*y + pe[3];
....................    r = r*y + pe[4];
....................    r = r*y + pe[5];
.................... 
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... 
.................... // Overloaded function exp() for data type - Float64
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011,
....................                           8.71486547014137e-009,9.84458531538385e-008,
....................                           1.32588296983536e-006,1.52489283823016e-005,
....................                           0.000154037598423921,0.00133335487036216,
....................                           0.00961812936407326,0.0555041086222122,
....................                           0.240226506962827,0.693147180559823};
.................... 
.................... float64 exp(float64 x)
.................... {
....................    float64 y, res, r;
....................    unsigned int16 data1, data2;
....................    unsigned int16 *p;
....................    signed int16 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 709.7827128)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x*LN2_INV;
....................    n = (signed int16)y;
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... 
.................... #if !defined(__PCD__)
....................    *((unsigned int16 *)(&res)) = n + 0x7F;
.................... #endif
....................    p= (((unsigned int16 *)(&res))+3);
....................    data1 = *p;
....................    data2 = *p;   
....................    data1 = n + 0x3FF;
....................    data1 = data1 <<4;
....................    if(bit_test(data2,15))
....................    bit_set(data1,15);
....................    data2 = data2 & 0x000F;
....................    data1 ^= data2;
.................... 
....................    *(((unsigned int16 *)(&res)+3)) = data1;
.................... 
.................... 
....................    y = y*LN2_INV - (float64)n;
.................... 
....................    r = pe_64[0]*y + pe_64[1];
....................    r = r*y + pe_64[2];
....................    r = r*y + pe_64[3];
....................    r = r*y + pe_64[4];
....................    r = r*y + pe_64[5];
....................    r = r*y + pe_64[6];
....................    r = r*y + pe_64[7];
....................    r = r*y + pe_64[8];
....................    r = r*y + pe_64[9];
....................    r = r*y + pe_64[10];
....................    r = r*y + pe_64[11];
....................    
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... #ENDIF
.................... 
.................... 
.................... /************************************************************/
.................... 
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217};
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671};
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float log(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the the natural log of x
.................... // Date : N/A
.................... //
.................... float32 log(float32 x)
.................... {
....................    float32 y, res, r, y2;
....................    #if defined(__PCD__)
....................    unsigned int8  data1,data2;
....................    #endif
....................    signed int8 n;
....................    #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
.................... #if !defined(__PCD__)
....................     *((unsigned int8 *)(&y)) = 0x7E; 
.................... #endif
.................... 
.................... #if defined(__PCD__) // Takes care of IEEE format
....................    data2 = *(((unsigned int8 *)(&y))+3);
....................    *(((unsigned int8 *)(&y))+3) = 0x3F;
....................    data1 = *(((unsigned int8 *)(&y))+2);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&y))+2) = data1;
....................    if(bit_test(data2,7))
....................      bit_set(*(((unsigned int8 *)(&y))+3),7);
.................... #endif
.................... 
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl[0]*y2 + pl[1];
.................... 
....................       r = ql[0]*y2 + ql[1];
....................       r = r*y2 + 1.0;
.................... 
....................       res = y*res/r;
.................... #if !defined(__PCD__)
....................       n = *((unsigned int8 *)(&x)) - 0x7E;
.................... #endif
.................... #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&x)+3));
....................     rotate_left(&data1,1);
....................     data2 = *(((unsigned int8 *)(&x)+2));
....................     if(bit_test (data2,7))
....................       bit_set(data1,0);
....................     n = data1 - 0x7E;
.................... #endif
.................... 
....................       if (n<0) 
....................          r = -(float32)-n;
....................       else
....................          r = (float32)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................       res = 0.0;
.................... 
....................    return(res);
.................... }
.................... 
.................... //Overloaded function for log() for PCD
.................... // Overloaded function log() for data type - Float48
.................... #if defined(__PCD__)
.................... // Overloaded function log() for data type - float64
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370,
....................                           -3.120535668274329, 2.000000000000000};
.................... 
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234,
....................                           1.113943039156721, -1.893601167470470};
.................... 
.................... float48 log(float48 x)
.................... {
....................    float48 y, res, r, y2;
....................    unsigned int8  data1,data2;
....................    signed int8 n;
.................... #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
.................... #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
.................... 
.................... #if !defined(__PCD__)
....................       *((unsigned int8 *)(&y)) = 0x7E; 
.................... #endif
....................       data2 = *(((unsigned int8 *)(&y))+5);
....................       *(((unsigned int8 *)(&y))+5) = 0x3F;
....................       data1 = *(((unsigned int8 *)(&y))+4);
....................       bit_clear(data1,7);
....................       *(((unsigned int8 *)(&y))+4) = data1;
.................... 
....................       if(bit_test(data2,7))
....................       bit_set(*(((unsigned int8 *)(&y))+4),7);
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl_64[0]*y2 + pl_64[1];
....................       res = res*y2 + pl_64[2];
....................       res = res*y2 + pl_64[3];
.................... 
....................       r = ql_64[0]*y2 + ql_64[1];
....................       r = r*y2 + ql_64[2];
....................       r = r*y2 + ql_64[3];
....................       r = r*y2 + 1.0; 
....................       res = y*res/r;
.................... 
....................       data1 = *(((unsigned int8 *)(&x)+5));
....................       rotate_left(&data1,1);
....................       data2 = *(((unsigned int8 *)(&x)+4));
....................       if(bit_test (data2,7))
....................       bit_set(data1,0);
....................       
....................       n = data1 - 0x7E;
.................... 
....................       if (n<0)
....................       r = -(float48)-n;
....................       else
....................       r = (float48)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................    res = 0.0;
.................... 
....................    return(res);
.................... }
.................... 
.................... float64 log(float64 x)
.................... {
....................    float64 y, res, r, y2;
....................    unsigned int16  data1,data2;
....................    unsigned int16 *p;
....................    signed int16 n;
....................    #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
....................    #if !defined(__PCD__)
....................        *((unsigned int8 *)(&y)) = 0x7E; 
....................    #endif
....................       p= (((unsigned int16 *)(&y))+3);
....................       data1 = *p;
....................       data2 = *p;
....................       data1 = 0x3FE;
....................       data1 = data1 <<4;
....................       if(bit_test (data2,15))
....................          bit_set(data1,15);
....................       data2 = data2 & 0x000F;
....................       data1 ^=data2;
.................... 
....................       *p = data1;
.................... 
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl_64[0]*y2 + pl_64[1];
....................       res = res*y2 + pl_64[2];
....................       res = res*y2 + pl_64[3];
.................... 
....................       r = ql_64[0]*y2 + ql_64[1];
....................       r = r*y2 + ql_64[2];
....................       r = r*y2 + ql_64[3];
....................       r = r*y2 + 1.0;
.................... 
....................       res = y*res/r;
....................  
....................       p= (((unsigned int16 *)(&x))+3);
....................       data1 = *p;
....................       bit_clear(data1,15);
....................       data1 = data1 >>4;    
....................       n = data1 - 0x3FE;
.................... 
.................... 
....................       if (n<0)
....................          r = -(float64)-n;
....................       else
....................          r = (float64)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................       res = 0.0;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... 
.................... #define LN10 2.3025850929940456
.................... #define LN10_INV 0.4342944819032518276
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float log10(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the the log base 10 of x
.................... // Date : N/A
.................... //
.................... float32 log10(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... 
.................... //Overloaded functions for log10() for PCD
.................... // Overloaded function log10() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 log10(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... 
.................... // Overloaded function log10() for data type - Float64
.................... float64 log10(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... #endif
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float modf(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description :breaks the argument value int integral and fractional parts,
.................... // ach of which have the same sign as the argument.  It stores the integral part
.................... // as a float in the object pointed to by the iptr
.................... // Returns : returns the signed fractional part of value.
.................... // Date : N/A
.................... //
.................... 
.................... float32 modf(float32 value,float32 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... //Overloaded functions for modf() for PCD
.................... // Overloaded function modf() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 modf(float48 value,float48 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... // Overloaded function modf() for data type - Float64
.................... float64 modf(float64 value,float64 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float pwr(float x,float y)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (x^y)
.................... // Date : N/A
.................... // Note : 0 is returned when the function will generate an imaginary number
.................... //
.................... float32 pwr(float32 x,float32 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       }
....................    }
.................... }
.................... //Overloaded functions for pwr() for PCD
.................... // Overloaded function pwr() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 pwr(float48 x,float48 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... // Overloaded function pwr() for data type - Float64
.................... float64 pwr(float64 x,float64 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... #endif
.................... 
.................... //////////////////// Power functions ////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float pow(float x,float y)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (x^y)
.................... // Date : N/A
.................... // Note : 0 is returned when the function will generate an imaginary number
.................... //
.................... float32 pow(float32 x,float32 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... //Overloaded functions for pow() for PCD
.................... // Overloaded function for pow() data type - Float48
.................... #if defined(__PCD__)
.................... float48 pow(float48 x,float48 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... 
.................... // Overloaded function pow() for data type - Float64
.................... float64 pow(float64 x,float64 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sqrt(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the square root of x
.................... // Date : N/A
.................... //
.................... float32 sqrt(float32 x)
.................... {
....................    float32 y, res;
....................    #if defined(__PCD__)
....................    unsigned int16 data1,data2;
....................    #endif
....................    #if !defined(__PCD__)
....................    unsigned int8 *p;
....................    #endif
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    
....................    #if !defined(__PCD__)
....................     p=&y;
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1);
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     data1 = *(((unsigned int8 *)(&y))+3);
....................     data2 = *(((unsigned int8 *)(&y))+2);
....................     rotate_left(&data1,1);    
....................     if(bit_test(data2,7))    
....................        bit_set(data1,0);    
....................     data1 = ((data1+127) >>1);
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+3) = data1;
....................     *(((unsigned int8 *)(&y))+2) = data2;
....................     
....................   #endif
.................... 
....................    do {
....................       res=y;
....................       y+=(x/y);
.................... 
....................       #if !defined(__PCD__)
....................      (*p)--;
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     data1 = *(((unsigned int8 *)(&y))+3);
....................     data2 = *(((unsigned int8 *)(&y))+2);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1--;
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+3) = data1;
....................     *(((unsigned int8 *)(&y))+2) = data2;
....................     
....................   #endif
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... //Overloaded functions for sqrt() for PCD
.................... // Overloaded function sqrt() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sqrt(float48 x)
.................... {
....................    float48 y, res;
....................    unsigned int16 data1,data2;
....................    unsigned int8 *p;
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    
....................    #if !defined(__PCD__)
....................     p=&y;
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1);
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     p = (((unsigned int8 *)(&y))+5);
....................     data1 = *(((unsigned int8 *)(&y))+5);
....................     data2 = *(((unsigned int8 *)(&y))+4);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1 = ((data1+127) >>1);
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+5) = data1;
....................     *(((unsigned int8 *)(&y))+4) = data2;
....................     
....................   #endif
.................... 
....................    do {
....................       res=y;
....................       y+=(x/y);
.................... 
....................       #if !defined(__PCD__)
....................      (*p)--;
....................    #endif
....................    
....................     data1 = *(((unsigned int8 *)(&y))+5);
....................     data2 = *(((unsigned int8 *)(&y))+4);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1--;
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+5) = data1;
....................     *(((unsigned int8 *)(&y))+4) = data2;
....................     
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... 
.................... // Overloaded function sqrt() for data type - Float64
.................... float64 sqrt(float64 x)
.................... {
....................    float64 y, res;
....................    unsigned int16 *p;
....................    unsigned int16 temp1,temp2;
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    p= (((unsigned int16 *)(&y))+3);
....................    temp1 = *p;
....................    temp2 = *p;
....................    bit_clear(temp1,15);
....................    temp1 = (temp1>>4)+1023;
....................    temp1 = temp1 >> 1;
....................    temp1 = (temp1<<4) & 0xFFF0;
....................    if(bit_test(temp2,15))
....................       bit_set(temp1,15);
....................    temp2 = temp2 & 0x000F;
....................    temp1 ^= temp2;
....................    
....................    (*p) = temp1;
....................    
....................    do {
....................       res=y;
....................       y+=(x/y);
....................      temp1 = *p;
....................      temp2 = *p;
....................      bit_clear(temp1,15);
....................      temp1 = (temp1>>4);
....................      temp1--;
....................      temp1 = (temp1<<4) & 0xFFF0;
....................      if(bit_test(temp2,15))
....................         bit_set(temp1,15);
....................      temp2 = temp2 & 0x000F;
....................      temp1 ^= temp2;
....................      (*p) = temp1;
.................... 
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////// Trig Functions //////////////////////////////
.................... #ifdef PI_DIV_BY_TWO_INV
.................... #undef PI_DIV_BY_TWO_INV
.................... #endif
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134
.................... #ifdef PI_DIV_BY_TWO
.................... #undef PI_DIV_BY_TWO
.................... #endif
.................... #define PI_DIV_BY_TWO   1.5707963267948966
.................... #ifdef TWOBYPI
.................... #undef TWOBYPI
.................... #endif
.................... #define TWOBYPI          0.6366197723675813
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float cos(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the cosine value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 cos(float32 x)
.................... {
....................    float32 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float32 frac;
....................    float32 p[5] = {                    //by the series definition for cosine
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! )
....................        0.04166663896921267,
....................       -0.00138883894522527,
....................        0.00002476138231734,
....................       -0.00000026070414770
....................       //-0.00000000001147,
....................       // 0.00000000000005
....................    };
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 1.0;
....................    t = t * t;
....................    for (i = 0; i <= 4; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... 
.................... //Overloaded functions for cos() for PCD
.................... // Overloaded function cos() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 cos(float48 x)
.................... {
....................    float48 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float48 frac;
....................    float48 p[6] = {                    //by the series definition for cosine
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! )
....................        0.04166666666667,
....................       -0.00138888888889,
....................        0.00002480158730,
....................       -0.00000027557319,
....................        0.00000000208767
....................    };
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 0.999999999781;
....................    t = t * t;
....................    for (i = 0; i <= 5; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... // Overloaded function cos() for data type - Float64
.................... float64 cos(float64 x)
.................... {
....................    float64 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float64 frac;
....................    float64 p_64[9] = {               //by the series definition for cosine
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )             
....................       0.04166666666656518,
....................      -0.00138888888851691,
....................       0.00002480158658490,
....................      -0.00000027557239796,
....................       0.00000000208715031,
....................      -0.00000000001126577,
....................       0.00000000000000427,
....................       0.00000000000000372};
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 1.0;
....................    t = t * t;
....................    for (i = 0; i <= 8; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p_64[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sin(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the sine value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 sin(float32 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... 
.................... //Overloaded functions for sin() for PCD
.................... // Overloaded function sin() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sin(float48 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... 
.................... // Overloaded function sin() for data type - Float48
.................... float64 sin(float64 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float tan(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the tangent value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 tan(float32 x)
.................... {
....................    float32 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... //Overloaded functions for tan() for PCD
.................... // Overloaded function tan() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 tan(float48 x)
.................... {
....................    float48 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... 
.................... // Overloaded function tan() for data type - Float48
.................... float64 tan(float64 x)
.................... {
....................    float64 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... #endif
.................... 
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290};
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290};
.................... 
.................... float32 ASIN_COS(float32 x, unsigned int8 n)
.................... {
....................    float32 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas[0]*y2 + pas[1];
....................    res = res*y2 + pas[2];
.................... 
....................    r = qas[0]*y2 + qas[1];
....................    r = r*y2 + qas[2];
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... 
.................... 
.................... //Overloaded functions for ASIN_COS() for PCD
.................... // Overloaded function ASIN_COS() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 ASIN_COS(float48 x, unsigned int8 n)
.................... {
....................    float48 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas[0]*y2 + pas[1];
....................    res = res*y2 + pas[2];
.................... 
....................    r = qas[0]*y2 + qas[1];
....................    r = r*y2 + qas[2];
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... 
.................... // Overloaded function ASIN_COS() for data type - Float64
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907,
....................                  -0.360690137621842,0.024929451660228};
.................... 
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133,
....................                    0.052808872045749,-0.000662536036570};
....................                    
.................... float64 ASIN_COS(float64 x, unsigned int8 n)
.................... {
....................    float64 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas_64[4]*y2 + pas_64[3];
....................    res = res*y2 + pas_64[2];
....................    res = res*y2 + pas_64[1];
....................    res = res*y2 + pas_64[0];
.................... 
....................    r = qas_64[4]*y2 + qas_64[3];
....................    r = r*y2 + qas_64[2];
....................    r = r*y2 + qas_64[1];
....................    r = r*y2 + qas_64[0];
....................    r = r*y2 + 1.0;
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float asin(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arcsine value of the value x.
.................... // Date : N/A
.................... //
.................... float32 asin(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... //Overloaded functions for asin() for PCD
.................... // Overloaded function asin() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 asin(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... 
.................... // Overloaded function asin() for data type - Float64
.................... float64 asin(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float acos(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arccosine value of the value x.
.................... // Date : N/A
.................... //
.................... float32 acos(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... //Overloaded functions for acos() for PCD
.................... // Overloaded function acos() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 acos(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... 
.................... // Overloaded function acos() for data type - Float64
.................... float64 acos(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... #endif
.................... 
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457};
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457};
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float atan(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arctangent value of the value x.
.................... // Date : N/A
.................... //
.................... float32 atan(float32 x)
.................... {
....................    float32 y, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
.................... 
....................    res = pat[0]*y*y + pat[1];
....................    res = res*y*y + pat[2];
....................    res = res*y*y + pat[3];
.................... 
....................    r = qat[0]*y*y + qat[1];
....................    r = r*y*y + qat[2];
....................    r = r*y*y + qat[3];
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... //Overloaded functions for atan() for PCD
.................... // Overloaded function atan() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 atan(float48 x)
.................... {
....................    float48 y, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
.................... 
....................    res = pat[0]*y*y + pat[1];
....................    res = res*y*y + pat[2];
....................    res = res*y*y + pat[3];
.................... 
....................    r = qat[0]*y*y + qat[1];
....................    r = r*y*y + qat[2];
....................    r = r*y*y + qat[3];
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... 
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449,
....................                    0.579678874003185,0.072162702162882,0.002281100141660};
.................... 
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393,
....................                    0.182482977188688,0.011155377971690,0.000100013019160};
.................... // Overloaded function atan() for data type - Float64
.................... float64 atan(float64 x)
.................... {
....................    float64 y,y2, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
....................    y2 = y*y;
....................    res = pat_64[5]*y2 + pat_64[4];
....................    res = res*y2 + pat_64[3];
....................    res = res*y2 + pat_64[2];
....................    res = res*y2 + pat_64[1];
....................    res = res*y2 + pat_64[0];
.................... 
....................    r = qat_64[5]*y2 + qat_64[4];
....................    r = r*y2 + qat_64[3];
....................    r = r*y2 + qat_64[2];
....................    r = r*y2 + qat_64[1];
....................    r = r*y2 + qat_64[0];
....................    r = r*y2 + 1.0;
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... /////////////////////////////////////////////////////////////////////////////
.................... //   float atan2(float y, float x)
.................... /////////////////////////////////////////////////////////////////////////////
.................... // Description :computes the principal value of arc tangent of y/x, using the
.................... // signs of both the arguments to determine the quadrant of the return value
.................... // Returns : returns the arc tangent of y/x.
.................... // Date : N/A
.................... //
.................... 
.................... float32 atan2(float32 y,float32 x)
.................... {
....................    float32 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... 
.................... //Overloaded functions for atan2() for PCD
.................... // Overloaded function atan2() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 atan2(float48 y,float48 x)
.................... {
....................    float48 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... 
.................... // Overloaded function atan2() for data type - Float64
.................... float64 atan2(float64 y,float64 x)
.................... {
....................    float64 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... #endif
.................... 
.................... //////////////////// Hyperbolic functions ////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float cosh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic cosine value of x
.................... // Returns : returns the hyperbolic cosine value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 cosh(float32 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... //Overloaded functions for cosh() for PCD
.................... // Overloaded function cosh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 cosh(float48 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... 
.................... // Overloaded function cosh() for data type - Float64
.................... float64 cosh(float64 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sinh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic sine value of x
.................... // Returns : returns the hyperbolic sine value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 sinh(float32 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... //Overloaded functions for sinh() for PCD
.................... // Overloaded function sinh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sinh(float48 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... 
.................... // Overloaded function sinh() for data type - Float48
.................... float64 sinh(float64 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float tanh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic tangent value of x
.................... // Returns : returns the hyperbolic tangent value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 tanh(float32 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... //Overloaded functions for tanh() for PCD
.................... // Overloaded function tanh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 tanh(float48 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... 
.................... // Overloaded function tanh() for data type - Float64
.................... float64 tanh(float64 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float frexp(float x, signed int *exp)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : breaks a floating point number into a normalized fraction and an integral
.................... // power of 2. It stores the integer in the signed int object pointed to by exp.
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero,
.................... // both parts of the result are zero.
.................... // Date : N/A
.................... //
.................... 
.................... #define LOG2 .30102999566398119521
.................... #define LOG2_INV 3.32192809488736234787
.................... float32 frexp(float32 x, signed int8 *exp)
.................... {
....................    float32 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... 
.................... //Overloaded functions for frexp() for PCD
.................... // Overloaded function frexp() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 frexp(float48 x, signed int8 *exp)
.................... {
....................    float48 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... 
.................... // Overloaded function frexp() for data type - Float64
.................... float64 frexp(float64 x, signed int8 *exp)
.................... {
....................    float64 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... #endif
.................... 
.................... //////////////////////////////////////////////////////////////////////////////
.................... //   float ldexp(float x, signed int *exp)
.................... //////////////////////////////////////////////////////////////////////////////
.................... // Description : multiplies a floating point number by an integral power of 2.
.................... // Returns : returns the value of x times 2 raised to the power exp.
.................... // Date : N/A
.................... //
.................... 
.................... float32 ldexp(float32 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... //Overloaded functions for ldexp() for PCD
.................... // Overloaded function ldexp() for data type - Float48
.................... 
.................... #if defined(__PCD__)
.................... float48 ldexp(float48 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... // Overloaded function ldexp() for data type - Float64
.................... float64 ldexp(float64 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... #endif
.................... 
.................... #endif
.................... 
.................... #use delay(clock=4000000)
*
0141:  MOVLW  54
0142:  MOVWF  04
0143:  BCF    03.7
0144:  MOVF   00,W
0145:  BTFSC  03.2
0146:  GOTO   155
0147:  MOVLW  01
0148:  MOVWF  78
0149:  CLRF   77
014A:  DECFSZ 77,F
014B:  GOTO   14A
014C:  DECFSZ 78,F
014D:  GOTO   149
014E:  MOVLW  4A
014F:  MOVWF  77
0150:  DECFSZ 77,F
0151:  GOTO   150
0152:  GOTO   153
0153:  DECFSZ 00,F
0154:  GOTO   147
0155:  RETURN
.................... void lcd_init(void);             // Ham dung de khoi dong C.LCD.
.................... byte lcd_read_byte(void);         // Ham xu ly doc thong tin (dang 8 bit) tu thong tin dang 4 bit tu C.LCD.
.................... byte lcd_read_nibble(void);         // Ham doc thong tin (dang 4 bit / nibble) tu C.LCD.
.................... void lcd_send_byte(byte address, byte n);   // Ham gui thong tin (byte) toi C.LCD tai dia chi (address).
.................... void lcd_send_nibble(byte n);      // Ham gui thong tin (dang 4 bit / nibble) sang C.LCD.
.................... void lcd_gotoxy(byte x, byte y);   // Ham thiet lap vi tri ghi tren C.LCD.
.................... char lcd_getc(byte x, byte y);      // Ham tra ve ky tu tai vi tri (x,y) tren C.LCD.
.................... void lcd_putc(char c);            // Ham se hien thi ky tu c tai vi tri ke tiep tren C.LCD.
.................... // Khai bao bien.
.................... // Dinh nghia cac thong so.
.................... //!#define LCD_RS_PIN         PIN_B1   // Cac ket noi C.LCD voi vi dieu khien.
.................... //!#define LCD_RW_PIN         PIN_B2
.................... //!#define LCD_ENABLE_PIN     PIN_B3
.................... //!#define LCD_DATA4          PIN_B4
.................... //!#define LCD_DATA5          PIN_B5
.................... //!#define LCD_DATA6          PIN_B6
.................... //!#define LCD_DATA7          PIN_B7 
.................... 
.................... //!#define LCD_RS_PIN         PIN_C0   // Cac ket noi C.LCD voi vi dieu khien.
.................... //!#define LCD_RW_PIN         PIN_C1
.................... //!#define LCD_ENABLE_PIN     PIN_C2
.................... //!#define LCD_DATA4          PIN_C3
.................... //!#define LCD_DATA5          PIN_C4
.................... //!#define LCD_DATA6          PIN_C5
.................... //!#define LCD_DATA7          PIN_C6
.................... 
.................... 
.................... #define LCD_RS_PIN      PIN_D1   // Cac ket noi C.LCD voi vi dieu khien.
.................... #define LCD_RW_PIN      PIN_D2
.................... #define LCD_ENABLE_PIN  PIN_D3
.................... #define LCD_DATA4       PIN_D4
.................... #define LCD_DATA5       PIN_D5
.................... #define LCD_DATA6       PIN_D6
.................... #define LCD_DATA7       PIN_D7  
.................... 
.................... #define lcd_output_enable(x)   output_bit(LCD_ENABLE_PIN, x)   // Lenh dieu khien chan LCD_ENABLE_PIN.
.................... #define lcd_enable_tris()   output_drive(LCD_ENABLE_PIN)
.................... 
.................... #define lcd_output_rs(x)   output_bit(LCD_RS_PIN, x)   // Lenh dieu khien chan LCD_RS_PIN.
.................... #define lcd_rs_tris()      output_drive(LCD_RS_PIN)
.................... 
.................... #define lcd_output_rw(x)   output_bit(LCD_RW_PIN, x)   // Lenh dieu khien chan LCD_RW_PIN
.................... #define lcd_rw_tris()      output_drive(LCD_RW_PIN)
.................... 
.................... #define lcd_line_one   0x00    // Dia chi RAM C.LCD cho hang thu 1.
.................... #define lcd_line_two   0x40    // Dia chi RAM C.LCD cho hang thu 2.
.................... #define lcd_line_three   0x14
.................... #define lcd_line_four   0x54
.................... #define LCD_TYPE 0x02           // Thong tin cau hinh C.LCD: 0x00=5x7, 0x01=5x10, 0x02=2 lines
.................... 
.................... // Dinh nghia cac hang so.
.................... byte const LCD_INIT_STRING[4] = {0x28 | (LCD_TYPE << 2), 0x0C, 0x01, 0x06};
....................         // Cac byte nay can thiet de gui toi C.LCD, dung de khoi dong cau hinh hoat dong cho C.LCD.
....................       // Byte 1: 0x20 | (LCD_TYPE << 2) - So bit du lieu giao tiep (DL), so dong hien thi (N), kieu ky tu (F).
....................       //         0 0 1 DL N F x x (DL: Data Length, N: Number Line, F: Font).
....................          // Truong hop 1: 0x20 - 4 bit / 1 dong / 5 x 7.
....................          // Truong hop 2: 0x24 - 4 bit / 1 dong / 5 x 10.
....................          // Truong hop 3: 0x28 - 4 bit / 2 dong / 5 x 7.
....................       // Byte 2: 0x0C - Dieu khien hien thi (Bat hien thi, tat con tro, tat nhap nhay con tro).
....................       //         0 0 0 0 1 D C B (D: Display, C: Cursor, B: Blink).
....................       // Byte 3: 0x01 - Xoa hien thi va tra con tro ve dau dong.
....................       // Byte 4: 0x06 - Dat che do dau vao (Che do tang dia chi, tat dich chuyen hien thi).
....................       //         0 0 0 0 0 1 I/D S (I/D: Increment/Decrement, S: Shift).
....................       // Byte 5: .... - Doi con tro / hien thi.
....................       //         0 0 0 1 S/C R/L x x (S/C: Screen/Cursor, R/L: Right/Left).
.................... 
.................... // ***************************************************
.................... void lcd_init(void)    // Ham dung de khoi dong C.LCD.
.................... {
.................... // Khai bao bien.
.................... byte i;
.................... // Dinh nghia ham.
.................... output_drive(LCD_DATA4);   // Thiet lap chan port (Data) o che do ngo ra.
*
0209:  BSF    03.5
020A:  BCF    08.4
.................... output_drive(LCD_DATA5);
020B:  BCF    08.5
.................... output_drive(LCD_DATA6);
020C:  BCF    08.6
.................... output_drive(LCD_DATA7);
020D:  BCF    08.7
.................... 
.................... lcd_enable_tris();         // Thiet lap chan port (Control: EN, RS, RW) o che do ngo ra.
020E:  BCF    08.3
.................... lcd_rs_tris();
020F:  BCF    08.1
.................... lcd_rw_tris();
0210:  BCF    08.2
.................... 
.................... lcd_output_rs(0);         // RS = 0 - Databus = Bus lenh.
0211:  BCF    03.5
0212:  BCF    08.1
0213:  BSF    03.5
0214:  BCF    08.1
.................... lcd_output_rw(0);         // RW = 0 - Ghi thong tin vao C.LCD.
0215:  BCF    03.5
0216:  BCF    08.2
0217:  BSF    03.5
0218:  BCF    08.2
.................... lcd_output_enable(0);      // EN = 0 - Cam truy xuat C.LCD.
0219:  BCF    03.5
021A:  BCF    08.3
021B:  BSF    03.5
021C:  BCF    08.3
.................... 
.................... delay_ms(15);   // Tao thoi gian tre 15ms (Thoi gian de LCD tu reset khi moi duoc cap nguon).
021D:  MOVLW  0F
021E:  BCF    03.5
021F:  MOVWF  54
0220:  CALL   141
.................... 
.................... for(i=1;i<=3;i++)         // Doan lenh khoi dong C.LCD o che do 8 bit duoc thuc hien 3 lan lien tiep
0221:  MOVLW  01
0222:  MOVWF  46
0223:  MOVF   46,W
0224:  SUBLW  03
0225:  BTFSS  03.0
0226:  GOTO   22F
....................    {                  // tai thoi diem ban dau (de dam bao cho C.LCD hoat dong on dinh trong 
....................    lcd_send_nibble(0x03);    // truong hop khi cung cap nguon cho C.LCD ma dien ap nguon tang len cham).
0227:  MOVLW  03
0228:  MOVWF  5B
0229:  CALL   156
....................    delay_ms(5);         // RS = 0, RW = 0, D7 - D4 = 0011 (0x03) -> DL = 1 (8 bit).
022A:  MOVLW  05
022B:  MOVWF  54
022C:  CALL   141
022D:  INCF   46,F
022E:  GOTO   223
....................    }                  // Do co BF (Busy Flag) chua kiem tra duoc trong thoi diem nay, nen phai 
....................                      // thuc hien 3 lan (xem luu do khoi dong C.LCD cua nha san xuat).
.................... 
.................... lcd_send_nibble(0x02);      // Doan lenh khoi dong C.LCD o che do 4 bit. Tu luc nay thi 4 bit cao duoc ghi
022F:  MOVLW  02
0230:  MOVWF  5B
0231:  CALL   156
....................                      // ra truoc tien, sau do la 4 bit thap.
....................                      // RS = 0, RW = 0, D7 - D4 = 0010 (0x02) -> DL = 0 (4 bit).
....................                      // Co BF (Busy Flag) co the bat dau kiem tra duoc tu luc nay.
.................... 
.................... for(i=0;i<=3;i++)
0232:  CLRF   46
0233:  MOVF   46,W
0234:  SUBLW  03
0235:  BTFSS  03.0
0236:  GOTO   240
....................    lcd_send_byte(0,LCD_INIT_STRING[i]);   // Goi ham truyen thong tin (lenh) sang C.LCD.
0237:  MOVF   46,W
0238:  CALL   04F
0239:  MOVWF  47
023A:  CLRF   58
023B:  MOVF   47,W
023C:  MOVWF  59
023D:  CALL   1B2
023E:  INCF   46,F
023F:  GOTO   233
0240:  BCF    0A.3
0241:  BSF    0A.4
0242:  GOTO   01C (RETURN)
.................... }                                 // Lenh: Thiet lap cau hinh hoat dong cho C.LCD.
.................... 
.................... // ***************************************************
.................... byte lcd_read_byte(void)   // Ham xu ly doc thong tin (dang 8 bit) tu thong tin dang 4 bit tu C.LCD.
.................... {
.................... // Khai bao bien.
.................... byte low,high;
.................... // Dinh nghia ham.
.................... output_float(LCD_DATA4);   // Thiet lap chan port o che do ngo vao.
*
01B5:  BSF    08.4
.................... output_float(LCD_DATA5);
01B6:  BSF    08.5
.................... output_float(LCD_DATA6);
01B7:  BSF    08.6
.................... output_float(LCD_DATA7);
01B8:  BSF    08.7
.................... 
.................... lcd_output_rw(1);         // RW = 1 - Doc thong tin tu C.LCD.
01B9:  BCF    03.5
01BA:  BSF    08.2
01BB:  BSF    03.5
01BC:  BCF    08.2
....................                   // Tien hanh doc 4 bit cao cua thong tin tu C.LCD.
.................... delay_cycles(1);         // Tao tre 1 chu ky (t=1us voi fosc=4MHz).
01BD:  NOP
.................... lcd_output_enable(1);      // EN = 1 - Cho phep truy xuat C.LCD.
01BE:  BCF    03.5
01BF:  BSF    08.3
01C0:  BSF    03.5
01C1:  BCF    08.3
.................... delay_cycles(1);         // Tao tre 1 chu ky (t=1us voi fosc=4MHz).
01C2:  NOP
.................... high = lcd_read_nibble();   // Cat tam 4 bit du lieu (4 bit cao).
01C3:  BCF    03.5
01C4:  CALL   181
01C5:  MOVF   78,W
01C6:  MOVWF  5B
.................... lcd_output_enable(0);      // EN = 0 - Cam truy xuat C.LCD.
01C7:  BCF    08.3
01C8:  BSF    03.5
01C9:  BCF    08.3
....................                   // Tien hanh doc 4 bit thap cua thong tin tu C.LCD.
.................... delay_cycles(1);         // Tao tre 1 chu ky (t=1us voi fosc=4MHz).
01CA:  NOP
.................... lcd_output_enable(1);      // EN = 1 - Cho phep truy xuat C.LCD.
01CB:  BCF    03.5
01CC:  BSF    08.3
01CD:  BSF    03.5
01CE:  BCF    08.3
.................... delay_cycles(1);         // Tao tre 1 chu ky (t=1us voi fosc=4MHz).
01CF:  NOP
.................... low = lcd_read_nibble();   // Cat tam 4 bit du lieu (4 bit thap).
01D0:  BCF    03.5
01D1:  CALL   181
01D2:  MOVF   78,W
01D3:  MOVWF  5A
.................... lcd_output_enable(0);      // EN = 0 - Cam truy xuat C.LCD.
01D4:  BCF    08.3
01D5:  BSF    03.5
01D6:  BCF    08.3
.................... 
.................... output_drive(LCD_DATA4);   // Thiet lap chan port o che do ngo ra.
01D7:  BCF    08.4
.................... output_drive(LCD_DATA5);
01D8:  BCF    08.5
.................... output_drive(LCD_DATA6);
01D9:  BCF    08.6
.................... output_drive(LCD_DATA7);
01DA:  BCF    08.7
.................... 
.................... return((high<<4) | low);   // Tra ve ket qua du lieu (dang 8 bit).
01DB:  BCF    03.5
01DC:  SWAPF  5B,W
01DD:  MOVWF  77
01DE:  MOVLW  F0
01DF:  ANDWF  77,F
01E0:  MOVF   77,W
01E1:  IORWF  5A,W
01E2:  MOVWF  78
.................... }
.................... 
.................... // ***************************************************
.................... byte lcd_read_nibble(void)   // Ham doc thong tin (dang 4 bit / nibble) tu C.LCD.
*
0181:  CLRF   5C
.................... {
.................... // Khai bao bien.
.................... byte n = 0x00;   // Mac dinh gia tri ban dau cho noi chua se thong tin.
.................... // Dinh nghia ham.
.................... n |= input(LCD_DATA4);         // Doc lan luot cac bit tu bus du lieu.
0182:  BSF    03.5
0183:  BSF    08.4
0184:  MOVLW  00
0185:  BCF    03.5
0186:  BTFSC  08.4
0187:  MOVLW  01
0188:  IORWF  5C,F
.................... n |= input(LCD_DATA5) << 1;
0189:  BSF    03.5
018A:  BSF    08.5
018B:  MOVLW  00
018C:  BCF    03.5
018D:  BTFSC  08.5
018E:  MOVLW  01
018F:  MOVWF  77
0190:  BCF    03.0
0191:  RLF    77,F
0192:  MOVF   77,W
0193:  IORWF  5C,F
.................... n |= input(LCD_DATA6) << 2;
0194:  BSF    03.5
0195:  BSF    08.6
0196:  MOVLW  00
0197:  BCF    03.5
0198:  BTFSC  08.6
0199:  MOVLW  01
019A:  MOVWF  77
019B:  RLF    77,F
019C:  RLF    77,F
019D:  MOVLW  FC
019E:  ANDWF  77,F
019F:  MOVF   77,W
01A0:  IORWF  5C,F
.................... n |= input(LCD_DATA7) << 3;
01A1:  BSF    03.5
01A2:  BSF    08.7
01A3:  MOVLW  00
01A4:  BCF    03.5
01A5:  BTFSC  08.7
01A6:  MOVLW  01
01A7:  MOVWF  77
01A8:  RLF    77,F
01A9:  RLF    77,F
01AA:  RLF    77,F
01AB:  MOVLW  F8
01AC:  ANDWF  77,F
01AD:  MOVF   77,W
01AE:  IORWF  5C,F
.................... 
.................... return(n);   // Tra ve ket qua doc duoc (data = 0000 xxxx).
01AF:  MOVF   5C,W
01B0:  MOVWF  78
01B1:  RETURN
.................... }
.................... 
.................... // ***************************************************
.................... void lcd_send_byte(byte address, byte n)   // Ham gui thong tin (byte) toi C.LCD tai dia chi (address).
.................... {                                 // address = 0: Lenh / 1: Du lieu.
....................                                  // byte = Thong tin can gui (8 bit).
.................... // Khai bao bien.
.................... 
.................... // Dinh nghia ham.  
.................... lcd_output_rs(0);      // RS = 0 - Databus = Bus lenh.
01B2:  BCF    08.1
01B3:  BSF    03.5
01B4:  BCF    08.1
.................... while(bit_test(lcd_read_byte(),7));   // Cho Busy Flag = 0 (C.LCD da xu ly xong).
*
01E3:  MOVF   78,W
01E4:  MOVWF  5A
01E5:  BTFSS  5A.7
01E6:  GOTO   1E9
01E7:  BSF    03.5
01E8:  GOTO   1B5
.................... lcd_output_rs(address);   // RS = address - Databus = Bus lenh/du lieu.
01E9:  MOVF   58,F
01EA:  BTFSS  03.2
01EB:  GOTO   1EE
01EC:  BCF    08.1
01ED:  GOTO   1EF
01EE:  BSF    08.1
01EF:  BSF    03.5
01F0:  BCF    08.1
.................... delay_cycles(1);      // Tao tre 1 chu ky (t=1us voi fosc=4MHz).
01F1:  NOP
.................... lcd_output_rw(0);      // RW = 0 - Ghi thong tin vao C.LCD.
01F2:  BCF    03.5
01F3:  BCF    08.2
01F4:  BSF    03.5
01F5:  BCF    08.2
.................... delay_cycles(1);      // Tao tre 1 chu ky (t=1us voi fosc=4MHz).
01F6:  NOP
.................... lcd_output_enable(0);   // EN = 0 - Cam truy xuat C.LCD.
01F7:  BCF    03.5
01F8:  BCF    08.3
01F9:  BSF    03.5
01FA:  BCF    08.3
.................... lcd_send_nibble(n >> 4);   // Goi ham truyen 4 bit cao sang C.LCD.
01FB:  BCF    03.5
01FC:  SWAPF  59,W
01FD:  MOVWF  5A
01FE:  MOVLW  0F
01FF:  ANDWF  5A,F
0200:  MOVF   5A,W
0201:  MOVWF  5B
0202:  CALL   156
.................... lcd_send_nibble(n & 0x0F);   // Goi ham truyen 4 bit thap sang C.LCD.
0203:  MOVF   59,W
0204:  ANDLW  0F
0205:  MOVWF  5A
0206:  MOVWF  5B
0207:  CALL   156
0208:  RETURN
.................... }
.................... 
.................... // ***************************************************
.................... void lcd_send_nibble(byte n)   // Ham gui thong tin (dang 4 bit / nibble) sang C.LCD.
.................... {                        // n = Thong tin can gui. 4 bit can gui phai nam vi tri 4 bit thap.
.................... // Khai bao bien.
.................... 
.................... // Dinh nghia ham. 
.................... output_bit(LCD_DATA4, bit_test(n, 0));   // Xuat lan luot cac bit len bus du lieu.
*
0156:  BTFSC  5B.0
0157:  GOTO   15A
0158:  BCF    08.4
0159:  GOTO   15B
015A:  BSF    08.4
015B:  BSF    03.5
015C:  BCF    08.4
.................... output_bit(LCD_DATA5, bit_test(n, 1));
015D:  BCF    03.5
015E:  BTFSC  5B.1
015F:  GOTO   162
0160:  BCF    08.5
0161:  GOTO   163
0162:  BSF    08.5
0163:  BSF    03.5
0164:  BCF    08.5
.................... output_bit(LCD_DATA6, bit_test(n, 2));
0165:  BCF    03.5
0166:  BTFSC  5B.2
0167:  GOTO   16A
0168:  BCF    08.6
0169:  GOTO   16B
016A:  BSF    08.6
016B:  BSF    03.5
016C:  BCF    08.6
.................... output_bit(LCD_DATA7, bit_test(n, 3));
016D:  BCF    03.5
016E:  BTFSC  5B.3
016F:  GOTO   172
0170:  BCF    08.7
0171:  GOTO   173
0172:  BSF    08.7
0173:  BSF    03.5
0174:  BCF    08.7
....................     
.................... delay_cycles(1);      // Tao tre 1 chu ky (t=1us voi fosc=4MHz).
0175:  NOP
.................... lcd_output_enable(1);   // Tao xung ghi thong tin vao C.LCD.
0176:  BCF    03.5
0177:  BSF    08.3
0178:  BSF    03.5
0179:  BCF    08.3
.................... delay_us(2);         // Tao tre 2 chu ky (t=2us voi fosc=4MHz).
017A:  GOTO   17B
.................... lcd_output_enable(0);   // Tao xung ghi thong tin vao LCD - EN = 1->0 (High to Low).
017B:  BCF    03.5
017C:  BCF    08.3
017D:  BSF    03.5
017E:  BCF    08.3
017F:  BCF    03.5
0180:  RETURN
.................... }
.................... 
.................... // ***************************************************
.................... void lcd_gotoxy(byte x, byte y)   // Ham thiet lap vi tri ghi tren C.LCD (Goc tren ben trai co toa do la 1,1).
.................... {
.................... // Khai bao bien.
.................... byte address;
.................... // Dinh nghia ham.  
.................... if(y==1)               // Kiem tra vi tri truy xuat thuoc hang 2.
*
0243:  DECFSZ 55,W
0244:  GOTO   247
....................    address=lcd_line_one;      // Nap dia chi RAM cua hang 2. 
0245:  CLRF   56
0246:  GOTO   25B
.................... else if(y==2)      // Neu vi tri truy xuat thuoc hang 1.
0247:  MOVF   55,W
0248:  SUBLW  02
0249:  BTFSS  03.2
024A:  GOTO   24E
....................    address=lcd_line_two;      // Nap dia chi RAM cua hang 1.
024B:  MOVLW  40
024C:  MOVWF  56
024D:  GOTO   25B
.................... else if(y==3)
024E:  MOVF   55,W
024F:  SUBLW  03
0250:  BTFSS  03.2
0251:  GOTO   255
....................    address=lcd_line_three;     
0252:  MOVLW  14
0253:  MOVWF  56
0254:  GOTO   25B
.................... else if(y==4)
0255:  MOVF   55,W
0256:  SUBLW  04
0257:  BTFSS  03.2
0258:  GOTO   25B
....................    address=lcd_line_four;   
0259:  MOVLW  54
025A:  MOVWF  56
.................... 
.................... address+=x-1;               // Ghep dia chi cot vao dia chi tong quat (address). address = address + (x-1).      
025B:  MOVLW  01
025C:  SUBWF  54,W
025D:  ADDWF  56,F
....................                         // Ta qui uoc: Goc tren ben trai co toa do la 1,1 -> Cot dau tien la Cot 1
....................                         // (x-1) vi C.LCD qui uoc cot dau tien co dia chi la 0.
.................... lcd_send_byte(0,0x80|address);   // Goi ham truyen thong tin (lenh) sang C.LCD.
025E:  MOVF   56,W
025F:  IORLW  80
0260:  MOVWF  57
0261:  CLRF   58
0262:  MOVF   57,W
0263:  MOVWF  59
0264:  CALL   1B2
0265:  RETURN
.................... }                        // Lenh: Thiet lap dia chi DDRAM cua C.LCD (addresss).   
.................... 
.................... // ***************************************************
.................... char lcd_getc(byte x, byte y)   // Ham tra ve ky tu tai vi tri (x,y) tren C.LCD.
.................... {
.................... // Khai bao bien.
.................... char value;
.................... // Dinh nghia ham.  
.................... lcd_gotoxy(x,y);            // Xac dinh toa do C.LCD can truy xuat.
.................... while(bit_test(lcd_read_byte(),7));   // Cho Busy Flag = 0 (C.LCD da xu ly xong).
.................... lcd_output_rs(1);         // RS = 1 - Databus = Bus du lieu.
.................... value = lcd_read_byte();   // Doc ve tu C.LCD.
.................... lcd_output_rs(0);         // RS = 0 - Databus = Bus lenh.
.................... 
.................... return(value);      // Tra ve ma ky tu tai toa do yeu cau.
.................... }
.................... 
.................... // ***************************************************
.................... void lcd_putc(char c)   // Ham se hien thi ky tu c tai vi tri ke tiep tren C.LCD.
.................... {
.................... // Khai bao bien.
.................... 
.................... // Dinh nghia ham. 
.................... switch (c)
0266:  MOVF   53,W
0267:  XORLW  0C
0268:  BTFSC  03.2
0269:  GOTO   271
026A:  XORLW  06
026B:  BTFSC  03.2
026C:  GOTO   279
026D:  XORLW  02
026E:  BTFSC  03.2
026F:  GOTO   27F
0270:  GOTO   284
....................    {
....................    case '\f':     // Chuc nang xoa hien thi.
....................       lcd_send_byte(0,0x01);   // Goi ham truyen thong tin (lenh) sang C.LCD.
0271:  CLRF   58
0272:  MOVLW  01
0273:  MOVWF  59
0274:  CALL   1B2
....................       delay_ms(2);         // Lenh: Xoa hien thi tren man hinh C.LCD (0x01).
0275:  MOVLW  02
0276:  MOVWF  54
0277:  CALL   141
....................       break;
0278:  GOTO   289
....................    case '\n':       // Chuc nang bat dau hang thu 2.
....................       lcd_gotoxy(1,0x02);     // Goi ham truyen thong tin (du lieu) sang C.LCD.   
0279:  MOVLW  01
027A:  MOVWF  54
027B:  MOVLW  02
027C:  MOVWF  55
027D:  CALL   243
....................       break;
027E:  GOTO   289
....................     case '\b':       // Chuc nang lui ve 1 vi tri.
....................       lcd_send_byte(0,0x10);    // Goi ham truyen thong tin (lenh) sang C.LCD. 
027F:  CLRF   58
0280:  MOVLW  10
0281:  MOVWF  59
0282:  CALL   1B2
....................       break;               // Lenh: Doi con tro sang trai (0x10).
0283:  GOTO   289
....................    default:       // Chuc nang hien thi ky tu c tai vi tri ke tiep tren C.LCD.
....................       lcd_send_byte(1,c);// Goi ham truyen thong tin (du lieu) sang C.LCD.
0284:  MOVLW  01
0285:  MOVWF  58
0286:  MOVF   53,W
0287:  MOVWF  59
0288:  CALL   1B2
....................       break;
....................    }
0289:  RETURN
.................... }      
.................... // ***************************************************   
.................... 
.................... 
.................... 
.................... 
.................... #define UP input(PIN_B0)
.................... #define DOWN input(PIN_B1)
.................... #define OK input(PIN_B2)
.................... #define BACK input(PIN_B3)
.................... #define BTN_DEN input(PIN_B6)
.................... #define BTN_QUAT input(PIN_B7)
.................... #define BTN_QUAT2 input(PIN_C0)
.................... //!
.................... //!#define SPBRG (int8*)0x99
.................... //!#define RCSTA (int8*)0x18
.................... //!#define TXSTA (int*)0x98
.................... //!
.................... 
.................... unsigned char select = 1;
.................... int time = 0;
.................... int time1 = 0;
.................... int time_light=0;
.................... int flag_dasetup = 0;
.................... int flag = 1;
.................... int flag_manual = 0;
.................... float Tam;
.................... float GiatriADC;
.................... float Nhietdo;
.................... void hienthi(unsigned char select)
.................... {       
....................    lcd_gotoxy(1, 1);
*
043C:  MOVLW  01
043D:  MOVWF  54
043E:  MOVWF  55
043F:  CALL   243
....................    printf(lcd_putc,"     DISPLAY        ");
0440:  MOVLW  57
0441:  BSF    03.6
0442:  MOVWF  0D
0443:  MOVLW  00
0444:  MOVWF  0F
0445:  BCF    03.6
0446:  CALL   28A
....................    lcd_gotoxy(1, 2);
0447:  MOVLW  01
0448:  MOVWF  54
0449:  MOVLW  02
044A:  MOVWF  55
044B:  CALL   243
....................    printf(lcd_putc,"     SETTING        ");   
044C:  MOVLW  62
044D:  BSF    03.6
044E:  MOVWF  0D
044F:  MOVLW  00
0450:  MOVWF  0F
0451:  BCF    03.6
0452:  CALL   28A
....................    lcd_gotoxy(1,select);
0453:  MOVLW  01
0454:  MOVWF  54
0455:  MOVF   46,W
0456:  MOVWF  55
0457:  CALL   243
....................    printf(lcd_putc,">"); 
0458:  MOVLW  3E
0459:  MOVWF  53
045A:  CALL   266
045B:  RETURN
.................... }
.................... void hienthi_mode(unsigned char select)
.................... {       
....................    lcd_gotoxy(1, 1);
*
0650:  MOVLW  01
0651:  MOVWF  54
0652:  MOVWF  55
0653:  CALL   243
....................    printf(lcd_putc,"     MANUAL         ");
0654:  MOVLW  6D
0655:  BSF    03.6
0656:  MOVWF  0D
0657:  MOVLW  00
0658:  MOVWF  0F
0659:  BCF    03.6
065A:  CALL   28A
....................    lcd_gotoxy(1, 2);
065B:  MOVLW  01
065C:  MOVWF  54
065D:  MOVLW  02
065E:  MOVWF  55
065F:  CALL   243
....................    printf(lcd_putc,"     AUTO           ");   
0660:  MOVLW  78
0661:  BSF    03.6
0662:  MOVWF  0D
0663:  MOVLW  00
0664:  MOVWF  0F
0665:  BCF    03.6
0666:  CALL   28A
....................    lcd_gotoxy(1,select);
0667:  MOVLW  01
0668:  MOVWF  54
0669:  MOVF   46,W
066A:  MOVWF  55
066B:  CALL   243
....................    printf(lcd_putc,">"); 
066C:  MOVLW  3E
066D:  MOVWF  53
066E:  CALL   266
066F:  RETURN
.................... }
.................... void print_select(unsigned char select)
.................... {
....................    lcd_gotoxy(1,select);
....................    printf(lcd_putc,">"); 
.................... }
.................... void xoamanhinh()
.................... {
....................    lcd_gotoxy(1, 1);
*
045C:  MOVLW  01
045D:  MOVWF  54
045E:  MOVWF  55
045F:  CALL   243
....................    printf(lcd_putc,"                ");
0460:  MOVLW  83
0461:  BSF    03.6
0462:  MOVWF  0D
0463:  MOVLW  00
0464:  MOVWF  0F
0465:  BCF    03.6
0466:  CALL   28A
....................    lcd_gotoxy(1, 2);
0467:  MOVLW  01
0468:  MOVWF  54
0469:  MOVLW  02
046A:  MOVWF  55
046B:  CALL   243
....................    printf(lcd_putc,"                "); 
046C:  MOVLW  8C
046D:  BSF    03.6
046E:  MOVWF  0D
046F:  MOVLW  00
0470:  MOVWF  0F
0471:  BCF    03.6
0472:  CALL   28A
0473:  RETURN
.................... }
.................... void mode_manual(unsigned char select)
.................... {
....................    lcd_gotoxy(1, 1);
*
0670:  MOVLW  01
0671:  MOVWF  54
0672:  MOVWF  55
0673:  CALL   243
....................    printf(lcd_putc,"    -- ON --   ");
0674:  MOVLW  95
0675:  BSF    03.6
0676:  MOVWF  0D
0677:  MOVLW  00
0678:  MOVWF  0F
0679:  BCF    03.6
067A:  CALL   28A
....................    lcd_gotoxy(1, 2);
067B:  MOVLW  01
067C:  MOVWF  54
067D:  MOVLW  02
067E:  MOVWF  55
067F:  CALL   243
....................    printf(lcd_putc,"    -- OFF --  ");   
0680:  MOVLW  9D
0681:  BSF    03.6
0682:  MOVWF  0D
0683:  MOVLW  00
0684:  MOVWF  0F
0685:  BCF    03.6
0686:  CALL   28A
....................    lcd_gotoxy(1,select);
0687:  MOVLW  01
0688:  MOVWF  54
0689:  MOVF   46,W
068A:  MOVWF  55
068B:  CALL   243
....................    printf(lcd_putc,">"); 
068C:  MOVLW  3E
068D:  MOVWF  53
068E:  CALL   266
068F:  RETURN
.................... }
.................... void luachon_caidat(unsigned char select)
.................... {
....................    lcd_gotoxy(0, 1);
0690:  CLRF   54
0691:  MOVLW  01
0692:  MOVWF  55
0693:  CALL   243
....................    printf(lcd_putc,"    -- FAN --  ");
0694:  MOVLW  A5
0695:  BSF    03.6
0696:  MOVWF  0D
0697:  MOVLW  00
0698:  MOVWF  0F
0699:  BCF    03.6
069A:  CALL   28A
....................    lcd_gotoxy(0, 2);
069B:  CLRF   54
069C:  MOVLW  02
069D:  MOVWF  55
069E:  CALL   243
....................    printf(lcd_putc,"    -- LED --  ");   
069F:  MOVLW  AD
06A0:  BSF    03.6
06A1:  MOVWF  0D
06A2:  MOVLW  00
06A3:  MOVWF  0F
06A4:  BCF    03.6
06A5:  CALL   28A
....................    lcd_gotoxy(1,select);
06A6:  MOVLW  01
06A7:  MOVWF  54
06A8:  MOVF   46,W
06A9:  MOVWF  55
06AA:  CALL   243
....................    printf(lcd_putc,">"); 
06AB:  MOVLW  3E
06AC:  MOVWF  53
06AD:  CALL   266
06AE:  RETURN
.................... }
.................... 
.................... void caidat_fan(unsigned char select)
.................... {
....................    lcd_gotoxy(1, 1);
*
076B:  MOVLW  01
076C:  MOVWF  54
076D:  MOVWF  55
076E:  CALL   243
....................    printf(lcd_putc,"     TOP:");
076F:  MOVLW  B5
0770:  BSF    03.6
0771:  MOVWF  0D
0772:  MOVLW  00
0773:  MOVWF  0F
0774:  BCF    03.6
0775:  CALL   28A
....................    lcd_gotoxy(1, 2);
0776:  MOVLW  01
0777:  MOVWF  54
0778:  MOVLW  02
0779:  MOVWF  55
077A:  CALL   243
....................    printf(lcd_putc,"     BOT:");   
077B:  MOVLW  BA
077C:  BSF    03.6
077D:  MOVWF  0D
077E:  MOVLW  00
077F:  MOVWF  0F
0780:  BCF    03.6
0781:  CALL   28A
....................    lcd_gotoxy(1,select);
0782:  MOVLW  01
0783:  MOVWF  54
0784:  MOVF   46,W
0785:  MOVWF  55
0786:  CALL   243
....................    printf(lcd_putc,">"); 
0787:  MOVLW  3E
0788:  MOVWF  53
0789:  CALL   266
078A:  RETURN
.................... }
.................... 
.................... void caidat_light(unsigned char select)
.................... {
....................    lcd_gotoxy(1, 1);
*
0800:  MOVLW  01
0801:  MOVWF  54
0802:  MOVWF  55
0803:  BCF    0A.3
0804:  CALL   243
0805:  BSF    0A.3
....................    printf(lcd_putc,"  -- LIGHT --"); 
0806:  MOVLW  BF
0807:  BSF    03.6
0808:  MOVWF  0D
0809:  MOVLW  00
080A:  MOVWF  0F
080B:  BCF    0A.3
080C:  BCF    03.6
080D:  CALL   28A
080E:  BSF    0A.3
....................    lcd_gotoxy(1, 2);
080F:  MOVLW  01
0810:  MOVWF  54
0811:  MOVLW  02
0812:  MOVWF  55
0813:  BCF    0A.3
0814:  CALL   243
0815:  BSF    0A.3
....................    printf(lcd_putc,"  TIME:");
0816:  MOVLW  C6
0817:  BSF    03.6
0818:  MOVWF  0D
0819:  MOVLW  00
081A:  MOVWF  0F
081B:  BCF    0A.3
081C:  BCF    03.6
081D:  CALL   28A
081E:  BSF    0A.3
....................    lcd_gotoxy(15, 2);
081F:  MOVLW  0F
0820:  MOVWF  54
0821:  MOVLW  02
0822:  MOVWF  55
0823:  BCF    0A.3
0824:  CALL   243
0825:  BSF    0A.3
....................    printf(lcd_putc,"s");
0826:  MOVLW  73
0827:  MOVWF  53
0828:  BCF    0A.3
0829:  CALL   266
082A:  BSF    0A.3
082B:  RETURN
.................... }
.................... int dem1 = 0;
.................... int bien_light;
.................... void timerbatquat_batden()
.................... {
....................    set_timer0(61);
*
07F7:  MOVLW  3D
07F8:  MOVWF  01
....................    enable_interrupts(INT_TIMER0);
07F9:  BSF    0B.5
....................    enable_interrupts(GlOBAL);
07FA:  MOVLW  C0
07FB:  IORWF  0B,F
07FC:  BCF    0A.3
07FD:  BSF    0A.4
07FE:  GOTO   7AE (RETURN)
.................... //!   if(time_fan!= 0)
.................... //!   {
.................... //!      bien_fan = time_fan;
.................... //!      flag_time=1;
.................... //!   }
.................... //!   if(time_light!=0)
.................... //!   {
.................... //!      bien_light = time_light;
.................... //!   }
.................... }
.................... //!void batquat()
.................... //!{
.................... //!   if(time==100)  //1s
.................... //!   {
.................... //!      dem=dem+1;
.................... //!      time = 0;
.................... //!      lcd_gotoxy(12, 1);
.................... //!      printf(lcd_putc,"%3d",bien_fan = (bien_fan>0) ? bien_fan-1 : 0 );
.................... //!   }
.................... //!   if(dem == time_fan )
.................... //!   {
.................... //!      output_high(PIN_B4);
.................... //!      time_fan = 0;
.................... //!   }
.................... //!}
.................... void batden()
.................... {
.................... //!   if(time1==100)  //1s
.................... //!   {
.................... //!      dem1=dem1+1;
.................... //!      time1 = 0;
.................... //!      lcd_gotoxy(12, 2);
.................... //!      printf(lcd_putc,"%3d",bien_light = (bien_light>0) ? bien_light-1 : 0 );                          
.................... //!   }
....................    if(dem1==bien_light && flag == 1 )
*
00CE:  MOVF   41,W
00CF:  SUBWF  40,W
00D0:  BTFSS  03.2
00D1:  GOTO   0DB
00D2:  DECFSZ 30,W
00D3:  GOTO   0DB
....................    {
....................       output_high(PIN_B5);
00D4:  BSF    03.5
00D5:  BCF    06.5
00D6:  BCF    03.5
00D7:  BSF    06.5
....................       dem1 = 0;
00D8:  CLRF   40
....................       flag = 0;
00D9:  CLRF   30
....................    }
00DA:  GOTO   0EE
....................    else if(time1==100 && flag_dasetup ==1 && flag ==1 )  //1s
00DB:  MOVF   2D,W
00DC:  SUBLW  64
00DD:  BTFSS  03.2
00DE:  GOTO   0EE
00DF:  DECFSZ 2F,W
00E0:  GOTO   0EE
00E1:  DECFSZ 30,W
00E2:  GOTO   0EE
....................    {
....................       dem1=dem1+1;
00E3:  MOVLW  01
00E4:  ADDWF  40,F
....................       time1 = 0;
00E5:  CLRF   2D
....................       time_light = (time_light>0) ? time_light-1 : 0; 
00E6:  MOVF   2E,F
00E7:  BTFSC  03.2
00E8:  GOTO   0EC
00E9:  MOVLW  01
00EA:  SUBWF  2E,W
00EB:  GOTO   0ED
00EC:  MOVLW  00
00ED:  MOVWF  2E
....................    } 
.................... }
.................... 
.................... #int_TIMER0
.................... void TIMER0_isr() 
.................... {
.................... set_timer0(61);   //10ms
*
00CA:  MOVLW  3D
00CB:  MOVWF  01
.................... //!if(flag_time==1)
.................... //!{
.................... //!   time = time + 1;
.................... //!   batquat();
.................... //!}
....................    time1 = time1 +1;
00CC:  MOVLW  01
00CD:  ADDWF  2D,F
....................    batden();
*
00EE:  BCF    0B.2
00EF:  BCF    0A.3
00F0:  BCF    0A.4
00F1:  GOTO   02B
.................... }
.................... void delaytimer0_10ms(void)
.................... {
....................    set_timer0(0);
....................    while(get_timer0()<195);
....................    time = time + 1;
.................... }
.................... struct NGUONG
.................... {
....................    int top;
....................    int bot;
.................... };
....................    int a =0;
.................... void display_onoff()
.................... {
....................    
....................     if(input_state(PIN_B4)==1)
*
0474:  BTFSS  06.4
0475:  GOTO   483
....................     {
....................       lcd_gotoxy(2, 1);
0476:  MOVLW  02
0477:  MOVWF  54
0478:  MOVLW  01
0479:  MOVWF  55
047A:  CALL   243
....................       printf(lcd_putc,"F1:ON ");           
047B:  MOVLW  F2
047C:  BSF    03.6
047D:  MOVWF  0D
047E:  MOVLW  00
047F:  MOVWF  0F
0480:  BCF    03.6
0481:  CALL   28A
....................     }
0482:  GOTO   48F
....................     else
....................     {
....................       lcd_gotoxy(2, 1);
0483:  MOVLW  02
0484:  MOVWF  54
0485:  MOVLW  01
0486:  MOVWF  55
0487:  CALL   243
....................       printf(lcd_putc,"F1:OFF");          
0488:  MOVLW  F6
0489:  BSF    03.6
048A:  MOVWF  0D
048B:  MOVLW  00
048C:  MOVWF  0F
048D:  BCF    03.6
048E:  CALL   28A
....................     }
....................     if(input_state(PIN_C1)==1)
048F:  BTFSS  07.1
0490:  GOTO   49E
....................     {
....................       lcd_gotoxy(10, 1);
0491:  MOVLW  0A
0492:  MOVWF  54
0493:  MOVLW  01
0494:  MOVWF  55
0495:  CALL   243
....................       printf(lcd_putc,"F2:ON ");           
0496:  MOVLW  FA
0497:  BSF    03.6
0498:  MOVWF  0D
0499:  MOVLW  00
049A:  MOVWF  0F
049B:  BCF    03.6
049C:  CALL   28A
....................     }
049D:  GOTO   4AA
....................     else
....................     {
....................       lcd_gotoxy(10, 1);
049E:  MOVLW  0A
049F:  MOVWF  54
04A0:  MOVLW  01
04A1:  MOVWF  55
04A2:  CALL   243
....................       printf(lcd_putc,"F2:OFF");          
04A3:  MOVLW  FE
04A4:  BSF    03.6
04A5:  MOVWF  0D
04A6:  MOVLW  00
04A7:  MOVWF  0F
04A8:  BCF    03.6
04A9:  CALL   28A
....................     }
....................     if(input_state(PIN_B5)==1)
04AA:  BTFSS  06.5
04AB:  GOTO   4B8
....................     {
....................       lcd_gotoxy(2, 2);
04AC:  MOVLW  02
04AD:  MOVWF  54
04AE:  MOVWF  55
04AF:  CALL   243
....................       printf(lcd_putc,"L:ON ");            
04B0:  MOVLW  02
04B1:  BSF    03.6
04B2:  MOVWF  0D
04B3:  MOVLW  01
04B4:  MOVWF  0F
04B5:  BCF    03.6
04B6:  CALL   28A
....................     }
04B7:  GOTO   4C3
....................     else
....................     {
....................       lcd_gotoxy(2, 2);
04B8:  MOVLW  02
04B9:  MOVWF  54
04BA:  MOVWF  55
04BB:  CALL   243
....................       printf(lcd_putc,"L:OFF");              
04BC:  MOVLW  05
04BD:  BSF    03.6
04BE:  MOVWF  0D
04BF:  MOVLW  01
04C0:  MOVWF  0F
04C1:  BCF    03.6
04C2:  CALL   28A
....................     }
04C3:  BCF    0A.3
04C4:  BSF    0A.4
04C5:  GOTO   17F (RETURN)
.................... }
.................... 
.................... void bat_tat_quat(int top,int bot)
.................... {
....................    if(Nhietdo>top)
*
06EE:  CLRF   49
06EF:  MOVF   46,W
06F0:  MOVWF  48
06F1:  CALL   2E0
06F2:  MOVF   7A,W
06F3:  MOVWF  4B
06F4:  MOVF   79,W
06F5:  MOVWF  4A
06F6:  MOVF   78,W
06F7:  MOVWF  49
06F8:  MOVF   77,W
06F9:  MOVWF  48
06FA:  MOVF   3D,W
06FB:  MOVWF  4F
06FC:  MOVF   3C,W
06FD:  MOVWF  4E
06FE:  MOVF   3B,W
06FF:  MOVWF  4D
0700:  MOVF   3A,W
0701:  MOVWF  4C
0702:  CALL   6AF
0703:  BTFSS  03.0
0704:  GOTO   710
....................    {
....................       output_high(PIN_B4);
0705:  BSF    03.5
0706:  BCF    06.4
0707:  BCF    03.5
0708:  BSF    06.4
....................       output_high(PIN_C1);
0709:  BCF    43.1
070A:  MOVF   43,W
070B:  BSF    03.5
070C:  MOVWF  07
070D:  BCF    03.5
070E:  BSF    07.1
....................    }
070F:  GOTO   76A
....................    else if(Nhietdo>bot && Nhietdo<top)
0710:  CLRF   49
0711:  MOVF   47,W
0712:  MOVWF  48
0713:  CALL   2E0
0714:  MOVF   7A,W
0715:  MOVWF  4B
0716:  MOVF   79,W
0717:  MOVWF  4A
0718:  MOVF   78,W
0719:  MOVWF  49
071A:  MOVF   77,W
071B:  MOVWF  48
071C:  MOVF   3D,W
071D:  MOVWF  4F
071E:  MOVF   3C,W
071F:  MOVWF  4E
0720:  MOVF   3B,W
0721:  MOVWF  4D
0722:  MOVF   3A,W
0723:  MOVWF  4C
0724:  CALL   6AF
0725:  BTFSS  03.0
0726:  GOTO   749
0727:  CLRF   49
0728:  MOVF   46,W
0729:  MOVWF  48
072A:  CALL   2E0
072B:  MOVF   3D,W
072C:  MOVWF  4B
072D:  MOVF   3C,W
072E:  MOVWF  4A
072F:  MOVF   3B,W
0730:  MOVWF  49
0731:  MOVF   3A,W
0732:  MOVWF  48
0733:  MOVF   7A,W
0734:  MOVWF  4F
0735:  MOVF   79,W
0736:  MOVWF  4E
0737:  MOVF   78,W
0738:  MOVWF  4D
0739:  MOVF   77,W
073A:  MOVWF  4C
073B:  CALL   6AF
073C:  BTFSS  03.0
073D:  GOTO   749
....................    {
....................       output_high(PIN_B4);
073E:  BSF    03.5
073F:  BCF    06.4
0740:  BCF    03.5
0741:  BSF    06.4
....................       output_low(PIN_C1);
0742:  BCF    43.1
0743:  MOVF   43,W
0744:  BSF    03.5
0745:  MOVWF  07
0746:  BCF    03.5
0747:  BCF    07.1
....................    }
0748:  GOTO   76A
....................    else if(Nhietdo<bot)
0749:  CLRF   49
074A:  MOVF   47,W
074B:  MOVWF  48
074C:  CALL   2E0
074D:  MOVF   3D,W
074E:  MOVWF  4B
074F:  MOVF   3C,W
0750:  MOVWF  4A
0751:  MOVF   3B,W
0752:  MOVWF  49
0753:  MOVF   3A,W
0754:  MOVWF  48
0755:  MOVF   7A,W
0756:  MOVWF  4F
0757:  MOVF   79,W
0758:  MOVWF  4E
0759:  MOVF   78,W
075A:  MOVWF  4D
075B:  MOVF   77,W
075C:  MOVWF  4C
075D:  CALL   6AF
075E:  BTFSS  03.0
075F:  GOTO   76A
....................    {
....................       //output_low(PIN_B4);
....................       output_bit(PIN_B4,0);
0760:  BCF    06.4
0761:  BSF    03.5
0762:  BCF    06.4
....................       output_low(PIN_C1);
0763:  BCF    03.5
0764:  BCF    43.1
0765:  MOVF   43,W
0766:  BSF    03.5
0767:  MOVWF  07
0768:  BCF    03.5
0769:  BCF    07.1
....................    }
076A:  RETURN
.................... }
.................... void main()
*
1000:  MOVF   03,W
1001:  ANDLW  1F
1002:  MOVWF  03
1003:  MOVLW  01
1004:  MOVWF  2B
1005:  CLRF   2C
1006:  CLRF   2D
1007:  CLRF   2E
1008:  CLRF   2F
1009:  MOVWF  30
100A:  CLRF   31
100B:  CLRF   3F
100C:  CLRF   3E
100D:  CLRF   40
100E:  CLRF   42
100F:  MOVLW  FF
1010:  MOVWF  43
1011:  BSF    03.5
1012:  BSF    1F.0
1013:  BSF    1F.1
1014:  BSF    1F.2
1015:  BCF    1F.3
1016:  MOVLW  07
1017:  MOVWF  1C
1018:  BCF    03.7
.................... {
....................    lcd_init();
1019:  BCF    0A.4
101A:  BCF    03.5
101B:  GOTO   209
101C:  BSF    0A.4
....................    lcd_gotoxy(1, 1);
101D:  MOVLW  01
101E:  MOVWF  54
101F:  MOVWF  55
1020:  BCF    0A.4
1021:  CALL   243
1022:  BSF    0A.4
....................    printf(lcd_putc,"     DISPLAY");
1023:  MOVLW  08
1024:  BSF    03.6
1025:  MOVWF  0D
1026:  MOVLW  01
1027:  MOVWF  0F
1028:  BCF    0A.4
1029:  BCF    03.6
102A:  CALL   28A
102B:  BSF    0A.4
....................    lcd_gotoxy(1, 2);
102C:  MOVLW  01
102D:  MOVWF  54
102E:  MOVLW  02
102F:  MOVWF  55
1030:  BCF    0A.4
1031:  CALL   243
1032:  BSF    0A.4
....................    printf(lcd_putc,"     SETTING");
1033:  MOVLW  0F
1034:  BSF    03.6
1035:  MOVWF  0D
1036:  MOVLW  01
1037:  MOVWF  0F
1038:  BCF    0A.4
1039:  BCF    03.6
103A:  CALL   28A
103B:  BSF    0A.4
....................    lcd_gotoxy(1,1);
103C:  MOVLW  01
103D:  MOVWF  54
103E:  MOVWF  55
103F:  BCF    0A.4
1040:  CALL   243
1041:  BSF    0A.4
....................    printf(lcd_putc,">"); 
1042:  MOVLW  3E
1043:  MOVWF  53
1044:  BCF    0A.4
1045:  CALL   266
1046:  BSF    0A.4
....................    setup_timer_0(T0_INTERNAL|T0_DIV_256); 
1047:  BSF    03.5
1048:  MOVF   01,W
1049:  ANDLW  C0
104A:  IORLW  07
104B:  MOVWF  01
....................    setup_adc(ADC_CLOCK_INTERNAL);
104C:  BCF    1F.6
104D:  BCF    03.5
104E:  BSF    1F.6
104F:  BSF    1F.7
1050:  BSF    03.5
1051:  BSF    1F.7
1052:  BCF    03.5
1053:  BSF    1F.0
....................    setup_adc_ports(AN0_AN1_VSS_VREF);
1054:  BSF    03.5
1055:  BSF    1F.0
1056:  BCF    1F.1
1057:  BSF    1F.2
1058:  BCF    1F.3
....................    set_adc_channel(0);
1059:  MOVLW  00
105A:  MOVWF  78
105B:  BCF    03.5
105C:  MOVF   1F,W
105D:  ANDLW  C7
105E:  IORWF  78,W
105F:  MOVWF  1F
....................    struct NGUONG Nguongnhietdo;
....................    Nguongnhietdo.TOP = 45;
1060:  MOVLW  2D
1061:  MOVWF  44
....................    Nguongnhietdo.BOT = 40;
1062:  MOVLW  28
1063:  MOVWF  45
....................    output_low(PIN_B5); 
1064:  BSF    03.5
1065:  BCF    06.5
1066:  BCF    03.5
1067:  BCF    06.5
....................    output_low(PIN_B4); 
1068:  BSF    03.5
1069:  BCF    06.4
106A:  BCF    03.5
106B:  BCF    06.4
....................    output_low(PIN_C1); 
106C:  BCF    43.1
106D:  MOVF   43,W
106E:  BSF    03.5
106F:  MOVWF  07
1070:  BCF    03.5
1071:  BCF    07.1
....................    while(TRUE)
....................    {
....................       GiatriADC = read_adc();
1072:  BSF    1F.2
1073:  BTFSC  1F.2
1074:  GOTO   073
1075:  MOVF   1E,W
1076:  MOVWF  79
1077:  BSF    03.5
1078:  MOVF   1E,W
1079:  MOVWF  78
107A:  MOVF   79,W
107B:  MOVWF  7A
107C:  MOVF   1E,W
107D:  BCF    03.5
107E:  MOVWF  48
107F:  MOVF   79,W
1080:  MOVWF  49
1081:  BCF    0A.4
1082:  CALL   2E0
1083:  BSF    0A.4
1084:  MOVF   7A,W
1085:  MOVWF  39
1086:  MOVF   79,W
1087:  MOVWF  38
1088:  MOVF   78,W
1089:  MOVWF  37
108A:  MOVF   77,W
108B:  MOVWF  36
....................       Tam = GiatriADC*5/1023.0f;
108C:  MOVF   39,W
108D:  MOVWF  56
108E:  MOVF   38,W
108F:  MOVWF  55
1090:  MOVF   37,W
1091:  MOVWF  54
1092:  MOVF   36,W
1093:  MOVWF  53
1094:  CLRF   5A
1095:  CLRF   59
1096:  MOVLW  20
1097:  MOVWF  58
1098:  MOVLW  81
1099:  MOVWF  57
109A:  BCF    0A.4
109B:  CALL   2FD
109C:  BSF    0A.4
109D:  MOVF   7A,W
109E:  MOVWF  49
109F:  MOVF   79,W
10A0:  MOVWF  48
10A1:  MOVF   78,W
10A2:  MOVWF  47
10A3:  MOVF   77,W
10A4:  MOVWF  46
10A5:  MOVF   49,W
10A6:  MOVWF  4D
10A7:  MOVF   48,W
10A8:  MOVWF  4C
10A9:  MOVF   47,W
10AA:  MOVWF  4B
10AB:  MOVF   46,W
10AC:  MOVWF  4A
10AD:  CLRF   51
10AE:  MOVLW  C0
10AF:  MOVWF  50
10B0:  MOVLW  7F
10B1:  MOVWF  4F
10B2:  MOVLW  88
10B3:  MOVWF  4E
10B4:  BCF    0A.4
10B5:  CALL   372
10B6:  BSF    0A.4
10B7:  MOVF   7A,W
10B8:  MOVWF  35
10B9:  MOVF   79,W
10BA:  MOVWF  34
10BB:  MOVF   78,W
10BC:  MOVWF  33
10BD:  MOVF   77,W
10BE:  MOVWF  32
....................       Nhietdo = Tam/0.01;
10BF:  MOVF   35,W
10C0:  MOVWF  4D
10C1:  MOVF   34,W
10C2:  MOVWF  4C
10C3:  MOVF   33,W
10C4:  MOVWF  4B
10C5:  MOVF   32,W
10C6:  MOVWF  4A
10C7:  MOVLW  0A
10C8:  MOVWF  51
10C9:  MOVLW  D7
10CA:  MOVWF  50
10CB:  MOVLW  23
10CC:  MOVWF  4F
10CD:  MOVLW  78
10CE:  MOVWF  4E
10CF:  BCF    0A.4
10D0:  CALL   372
10D1:  BSF    0A.4
10D2:  MOVF   7A,W
10D3:  MOVWF  3D
10D4:  MOVF   79,W
10D5:  MOVWF  3C
10D6:  MOVF   78,W
10D7:  MOVWF  3B
10D8:  MOVF   77,W
10D9:  MOVWF  3A
....................       if(UP==0)
10DA:  BSF    03.5
10DB:  BSF    06.0
10DC:  BCF    03.5
10DD:  BTFSC  06.0
10DE:  GOTO   0F1
....................       {
....................          while(UP==0);
10DF:  BSF    03.5
10E0:  BSF    06.0
10E1:  BCF    03.5
10E2:  BTFSS  06.0
10E3:  GOTO   0DF
....................          select = (select == 1)? 2: select-1;
10E4:  DECFSZ 2B,W
10E5:  GOTO   0E8
10E6:  MOVLW  02
10E7:  GOTO   0EA
10E8:  MOVLW  01
10E9:  SUBWF  2B,W
10EA:  MOVWF  2B
....................          hienthi(select);
10EB:  MOVF   2B,W
10EC:  MOVWF  46
10ED:  BCF    0A.4
10EE:  CALL   43C
10EF:  BSF    0A.4
....................       }
10F0:  GOTO   109
....................       else if(DOWN==0)
10F1:  BSF    03.5
10F2:  BSF    06.1
10F3:  BCF    03.5
10F4:  BTFSC  06.1
10F5:  GOTO   109
....................       {
....................          while(DOWN==0);
10F6:  BSF    03.5
10F7:  BSF    06.1
10F8:  BCF    03.5
10F9:  BTFSS  06.1
10FA:  GOTO   0F6
....................          select = (select == 2)? 1: select+1;
10FB:  MOVF   2B,W
10FC:  SUBLW  02
10FD:  BTFSS  03.2
10FE:  GOTO   101
10FF:  MOVLW  01
1100:  GOTO   103
1101:  MOVLW  01
1102:  ADDWF  2B,W
1103:  MOVWF  2B
....................          hienthi(select);
1104:  MOVF   2B,W
1105:  MOVWF  46
1106:  BCF    0A.4
1107:  CALL   43C
1108:  BSF    0A.4
....................       } 
.................... //-----------------------------------------------------------------------//
....................       if(OK==0 && select == 1)
1109:  BSF    03.5
110A:  BSF    06.2
110B:  BCF    03.5
110C:  BTFSC  06.2
110D:  GOTO   203
110E:  DECFSZ 2B,W
110F:  GOTO   203
....................       {
....................          xoamanhinh();
1110:  BCF    0A.4
1111:  CALL   45C
1112:  BSF    0A.4
....................          select = 1;
1113:  MOVLW  01
1114:  MOVWF  2B
....................          while(TRUE)
....................          {
....................             GiatriADC = read_adc();
1115:  BSF    1F.2
1116:  BTFSC  1F.2
1117:  GOTO   116
1118:  MOVF   1E,W
1119:  MOVWF  79
111A:  BSF    03.5
111B:  MOVF   1E,W
111C:  MOVWF  78
111D:  MOVF   79,W
111E:  MOVWF  7A
111F:  MOVF   1E,W
1120:  BCF    03.5
1121:  MOVWF  48
1122:  MOVF   79,W
1123:  MOVWF  49
1124:  BCF    0A.4
1125:  CALL   2E0
1126:  BSF    0A.4
1127:  MOVF   7A,W
1128:  MOVWF  39
1129:  MOVF   79,W
112A:  MOVWF  38
112B:  MOVF   78,W
112C:  MOVWF  37
112D:  MOVF   77,W
112E:  MOVWF  36
....................             Tam = GiatriADC*5/1023.0f;
112F:  MOVF   39,W
1130:  MOVWF  56
1131:  MOVF   38,W
1132:  MOVWF  55
1133:  MOVF   37,W
1134:  MOVWF  54
1135:  MOVF   36,W
1136:  MOVWF  53
1137:  CLRF   5A
1138:  CLRF   59
1139:  MOVLW  20
113A:  MOVWF  58
113B:  MOVLW  81
113C:  MOVWF  57
113D:  BCF    0A.4
113E:  CALL   2FD
113F:  BSF    0A.4
1140:  MOVF   7A,W
1141:  MOVWF  49
1142:  MOVF   79,W
1143:  MOVWF  48
1144:  MOVF   78,W
1145:  MOVWF  47
1146:  MOVF   77,W
1147:  MOVWF  46
1148:  MOVF   49,W
1149:  MOVWF  4D
114A:  MOVF   48,W
114B:  MOVWF  4C
114C:  MOVF   47,W
114D:  MOVWF  4B
114E:  MOVF   46,W
114F:  MOVWF  4A
1150:  CLRF   51
1151:  MOVLW  C0
1152:  MOVWF  50
1153:  MOVLW  7F
1154:  MOVWF  4F
1155:  MOVLW  88
1156:  MOVWF  4E
1157:  BCF    0A.4
1158:  CALL   372
1159:  BSF    0A.4
115A:  MOVF   7A,W
115B:  MOVWF  35
115C:  MOVF   79,W
115D:  MOVWF  34
115E:  MOVF   78,W
115F:  MOVWF  33
1160:  MOVF   77,W
1161:  MOVWF  32
....................             Nhietdo = Tam/0.01;
1162:  MOVF   35,W
1163:  MOVWF  4D
1164:  MOVF   34,W
1165:  MOVWF  4C
1166:  MOVF   33,W
1167:  MOVWF  4B
1168:  MOVF   32,W
1169:  MOVWF  4A
116A:  MOVLW  0A
116B:  MOVWF  51
116C:  MOVLW  D7
116D:  MOVWF  50
116E:  MOVLW  23
116F:  MOVWF  4F
1170:  MOVLW  78
1171:  MOVWF  4E
1172:  BCF    0A.4
1173:  CALL   372
1174:  BSF    0A.4
1175:  MOVF   7A,W
1176:  MOVWF  3D
1177:  MOVF   79,W
1178:  MOVWF  3C
1179:  MOVF   78,W
117A:  MOVWF  3B
117B:  MOVF   77,W
117C:  MOVWF  3A
....................             display_onoff();
117D:  BCF    0A.4
117E:  GOTO   474
117F:  BSF    0A.4
....................             lcd_gotoxy(8,2);
1180:  MOVLW  08
1181:  MOVWF  54
1182:  MOVLW  02
1183:  MOVWF  55
1184:  BCF    0A.4
1185:  CALL   243
1186:  BSF    0A.4
....................             printf(lcd_putc,"Temp:%02.0f",Nhietdo);
1187:  MOVLW  16
1188:  BSF    03.6
1189:  MOVWF  0D
118A:  MOVLW  01
118B:  MOVWF  0F
118C:  BCF    03.0
118D:  MOVLW  05
118E:  BCF    03.6
118F:  MOVWF  46
1190:  BCF    0A.4
1191:  GOTO   4C6
1192:  BSF    0A.4
1193:  MOVLW  41
1194:  MOVWF  04
1195:  MOVF   3D,W
1196:  MOVWF  49
1197:  MOVF   3C,W
1198:  MOVWF  48
1199:  MOVF   3B,W
119A:  MOVWF  47
119B:  MOVF   3A,W
119C:  MOVWF  46
119D:  CLRF   4A
119E:  BCF    0A.4
119F:  GOTO   56E
11A0:  BSF    0A.4
....................             lcd_putc(223);
11A1:  MOVLW  DF
11A2:  MOVWF  53
11A3:  BCF    0A.4
11A4:  CALL   266
11A5:  BSF    0A.4
....................             lcd_putc("C");
11A6:  MOVLW  1C
11A7:  BSF    03.6
11A8:  MOVWF  0D
11A9:  MOVLW  01
11AA:  MOVWF  0F
11AB:  BCF    0A.4
11AC:  BCF    03.6
11AD:  CALL   28A
11AE:  BSF    0A.4
....................             if(BACK==0)
11AF:  BSF    03.5
11B0:  BSF    06.3
11B1:  BCF    03.5
11B2:  BTFSC  06.3
11B3:  GOTO   1C3
....................             {
....................                while(BACK==0);
11B4:  BSF    03.5
11B5:  BSF    06.3
11B6:  BCF    03.5
11B7:  BTFSS  06.3
11B8:  GOTO   1B4
....................                xoamanhinh();
11B9:  BCF    0A.4
11BA:  CALL   45C
11BB:  BSF    0A.4
....................                hienthi(select);
11BC:  MOVF   2B,W
11BD:  MOVWF  46
11BE:  BCF    0A.4
11BF:  CALL   43C
11C0:  BSF    0A.4
....................                break;
11C1:  GOTO   202
....................             }
11C2:  GOTO   201
....................             else if(BTN_QUAT==0)
11C3:  BSF    03.5
11C4:  BSF    06.7
11C5:  BCF    03.5
11C6:  BTFSC  06.7
11C7:  GOTO   1D6
....................             {
....................               while(BTN_QUAT==0);
11C8:  BSF    03.5
11C9:  BSF    06.7
11CA:  BCF    03.5
11CB:  BTFSS  06.7
11CC:  GOTO   1C8
....................               if(flag_manual!=0)
11CD:  MOVF   31,F
11CE:  BTFSC  03.2
11CF:  GOTO   1D5
....................               output_toggle(PIN_B4);
11D0:  BSF    03.5
11D1:  BCF    06.4
11D2:  MOVLW  10
11D3:  BCF    03.5
11D4:  XORWF  06,F
....................             }
11D5:  GOTO   201
....................             else if(BTN_DEN==0)
11D6:  BSF    03.5
11D7:  BSF    06.6
11D8:  BCF    03.5
11D9:  BTFSC  06.6
11DA:  GOTO   1E9
....................             {
....................               while(BTN_DEN==0);
11DB:  BSF    03.5
11DC:  BSF    06.6
11DD:  BCF    03.5
11DE:  BTFSS  06.6
11DF:  GOTO   1DB
....................               if(flag_manual!=0)
11E0:  MOVF   31,F
11E1:  BTFSC  03.2
11E2:  GOTO   1E8
....................               output_toggle(PIN_B5);
11E3:  BSF    03.5
11E4:  BCF    06.5
11E5:  MOVLW  20
11E6:  BCF    03.5
11E7:  XORWF  06,F
....................             }
11E8:  GOTO   201
....................             else if(BTN_QUAT2==0)
11E9:  BSF    43.0
11EA:  MOVF   43,W
11EB:  BSF    03.5
11EC:  MOVWF  07
11ED:  BCF    03.5
11EE:  BTFSC  07.0
11EF:  GOTO   201
....................             {
....................               while(BTN_QUAT2==0);
11F0:  BSF    43.0
11F1:  MOVF   43,W
11F2:  BSF    03.5
11F3:  MOVWF  07
11F4:  BCF    03.5
11F5:  BTFSS  07.0
11F6:  GOTO   1F0
....................               if(flag_manual!=0)
11F7:  MOVF   31,F
11F8:  BTFSC  03.2
11F9:  GOTO   201
....................               output_toggle(PIN_C1);
11FA:  BCF    43.1
11FB:  MOVF   43,W
11FC:  BSF    03.5
11FD:  MOVWF  07
11FE:  MOVLW  02
11FF:  BCF    03.5
1200:  XORWF  07,F
....................             }            
1201:  GOTO   115
....................          }
....................       }
1202:  GOTO   7E9
....................       ////////////////SETTING/////////////////
....................       else if(OK==0 && select == 2)
1203:  BSF    03.5
1204:  BSF    06.2
1205:  BCF    03.5
1206:  BTFSC  06.2
1207:  GOTO   7E9
1208:  MOVF   2B,W
1209:  SUBLW  02
120A:  BTFSS  03.2
120B:  GOTO   7E9
....................       {
....................          while(OK==0);
120C:  BSF    03.5
120D:  BSF    06.2
120E:  BCF    03.5
120F:  BTFSS  06.2
1210:  GOTO   20C
....................          xoamanhinh();
1211:  BCF    0A.4
1212:  CALL   45C
1213:  BSF    0A.4
....................          hienthi_mode(select);
1214:  MOVF   2B,W
1215:  MOVWF  46
1216:  BCF    0A.4
1217:  CALL   650
1218:  BSF    0A.4
....................          while(TRUE)
....................          {
....................             if(UP==0)
1219:  BSF    03.5
121A:  BSF    06.0
121B:  BCF    03.5
121C:  BTFSC  06.0
121D:  GOTO   230
....................             {
....................                while(UP==0);
121E:  BSF    03.5
121F:  BSF    06.0
1220:  BCF    03.5
1221:  BTFSS  06.0
1222:  GOTO   21E
....................                select = (select == 1)? 2: select-1;
1223:  DECFSZ 2B,W
1224:  GOTO   227
1225:  MOVLW  02
1226:  GOTO   229
1227:  MOVLW  01
1228:  SUBWF  2B,W
1229:  MOVWF  2B
....................                hienthi_mode(select);
122A:  MOVF   2B,W
122B:  MOVWF  46
122C:  BCF    0A.4
122D:  CALL   650
122E:  BSF    0A.4
....................             }
122F:  GOTO   7E8
....................             else if(DOWN==0)
1230:  BSF    03.5
1231:  BSF    06.1
1232:  BCF    03.5
1233:  BTFSC  06.1
1234:  GOTO   249
....................             {
....................                while(DOWN==0);
1235:  BSF    03.5
1236:  BSF    06.1
1237:  BCF    03.5
1238:  BTFSS  06.1
1239:  GOTO   235
....................                select = (select == 2)? 1: select+1;
123A:  MOVF   2B,W
123B:  SUBLW  02
123C:  BTFSS  03.2
123D:  GOTO   240
123E:  MOVLW  01
123F:  GOTO   242
1240:  MOVLW  01
1241:  ADDWF  2B,W
1242:  MOVWF  2B
....................                hienthi_mode(select);
1243:  MOVF   2B,W
1244:  MOVWF  46
1245:  BCF    0A.4
1246:  CALL   650
1247:  BSF    0A.4
....................             }
1248:  GOTO   7E8
....................             else if(BACK==0)
1249:  BSF    03.5
124A:  BSF    06.3
124B:  BCF    03.5
124C:  BTFSC  06.3
124D:  GOTO   25D
....................             {
....................                while(BACK==0);
124E:  BSF    03.5
124F:  BSF    06.3
1250:  BCF    03.5
1251:  BTFSS  06.3
1252:  GOTO   24E
....................                xoamanhinh();
1253:  BCF    0A.4
1254:  CALL   45C
1255:  BSF    0A.4
....................                hienthi(select);
1256:  MOVF   2B,W
1257:  MOVWF  46
1258:  BCF    0A.4
1259:  CALL   43C
125A:  BSF    0A.4
....................                break;
125B:  GOTO   7E9
....................             }
125C:  GOTO   7E8
....................             else if(BTN_QUAT==0)
125D:  BSF    03.5
125E:  BSF    06.7
125F:  BCF    03.5
1260:  BTFSC  06.7
1261:  GOTO   270
....................             {
....................                while(BTN_QUAT==0);
1262:  BSF    03.5
1263:  BSF    06.7
1264:  BCF    03.5
1265:  BTFSS  06.7
1266:  GOTO   262
....................                if(flag_manual!=0)
1267:  MOVF   31,F
1268:  BTFSC  03.2
1269:  GOTO   26F
....................                output_toggle(PIN_B4);
126A:  BSF    03.5
126B:  BCF    06.4
126C:  MOVLW  10
126D:  BCF    03.5
126E:  XORWF  06,F
....................             }
126F:  GOTO   7E8
....................             else if(BTN_DEN==0)
1270:  BSF    03.5
1271:  BSF    06.6
1272:  BCF    03.5
1273:  BTFSC  06.6
1274:  GOTO   283
....................             {
....................                while(BTN_DEN==0);
1275:  BSF    03.5
1276:  BSF    06.6
1277:  BCF    03.5
1278:  BTFSS  06.6
1279:  GOTO   275
....................                if(flag_manual!=0)
127A:  MOVF   31,F
127B:  BTFSC  03.2
127C:  GOTO   282
....................                output_toggle(PIN_B5);
127D:  BSF    03.5
127E:  BCF    06.5
127F:  MOVLW  20
1280:  BCF    03.5
1281:  XORWF  06,F
....................             }  
1282:  GOTO   7E8
....................             else if(BTN_QUAT2==0)
1283:  BSF    43.0
1284:  MOVF   43,W
1285:  BSF    03.5
1286:  MOVWF  07
1287:  BCF    03.5
1288:  BTFSC  07.0
1289:  GOTO   29C
....................             {
....................                while(BTN_QUAT2==0);
128A:  BSF    43.0
128B:  MOVF   43,W
128C:  BSF    03.5
128D:  MOVWF  07
128E:  BCF    03.5
128F:  BTFSS  07.0
1290:  GOTO   28A
....................                if(flag_manual!=0)
1291:  MOVF   31,F
1292:  BTFSC  03.2
1293:  GOTO   29B
....................                output_toggle(PIN_C1);
1294:  BCF    43.1
1295:  MOVF   43,W
1296:  BSF    03.5
1297:  MOVWF  07
1298:  MOVLW  02
1299:  BCF    03.5
129A:  XORWF  07,F
....................             }           
129B:  GOTO   7E8
....................             ////////////MANUAL////////////////
....................             else if(OK==0 && select==1)
129C:  BSF    03.5
129D:  BSF    06.2
129E:  BCF    03.5
129F:  BTFSC  06.2
12A0:  GOTO   409
12A1:  DECFSZ 2B,W
12A2:  GOTO   409
....................             {
....................                while(OK==0);
12A3:  BSF    03.5
12A4:  BSF    06.2
12A5:  BCF    03.5
12A6:  BTFSS  06.2
12A7:  GOTO   2A3
....................                mode_manual(select);
12A8:  MOVF   2B,W
12A9:  MOVWF  46
12AA:  BCF    0A.4
12AB:  CALL   670
12AC:  BSF    0A.4
....................                while(TRUE)
....................                {
....................                   if(UP==0)
12AD:  BSF    03.5
12AE:  BSF    06.0
12AF:  BCF    03.5
12B0:  BTFSC  06.0
12B1:  GOTO   2C6
....................                   {
....................                      while(UP==0);
12B2:  BSF    03.5
12B3:  BSF    06.0
12B4:  BCF    03.5
12B5:  BTFSS  06.0
12B6:  GOTO   2B2
....................                      select = (select == 1)? 2: select-1;
12B7:  DECFSZ 2B,W
12B8:  GOTO   2BB
12B9:  MOVLW  02
12BA:  GOTO   2BD
12BB:  MOVLW  01
12BC:  SUBWF  2B,W
12BD:  MOVWF  2B
....................                      mode_manual(select);
12BE:  MOVF   2B,W
12BF:  MOVWF  46
12C0:  BCF    0A.4
12C1:  CALL   670
12C2:  BSF    0A.4
....................                      a=1;
12C3:  MOVLW  01
12C4:  MOVWF  42
....................                   }
12C5:  GOTO   407
....................                   else if(DOWN==0)
12C6:  BSF    03.5
12C7:  BSF    06.1
12C8:  BCF    03.5
12C9:  BTFSC  06.1
12CA:  GOTO   2E1
....................                   {
....................                      while(DOWN==0);
12CB:  BSF    03.5
12CC:  BSF    06.1
12CD:  BCF    03.5
12CE:  BTFSS  06.1
12CF:  GOTO   2CB
....................                      select = (select == 2)? 1: select+1;
12D0:  MOVF   2B,W
12D1:  SUBLW  02
12D2:  BTFSS  03.2
12D3:  GOTO   2D6
12D4:  MOVLW  01
12D5:  GOTO   2D8
12D6:  MOVLW  01
12D7:  ADDWF  2B,W
12D8:  MOVWF  2B
....................                      mode_manual(select);
12D9:  MOVF   2B,W
12DA:  MOVWF  46
12DB:  BCF    0A.4
12DC:  CALL   670
12DD:  BSF    0A.4
....................                      a=1;
12DE:  MOVLW  01
12DF:  MOVWF  42
....................                   }               
12E0:  GOTO   407
....................                   else if(BACK==0)
12E1:  BSF    03.5
12E2:  BSF    06.3
12E3:  BCF    03.5
12E4:  BTFSC  06.3
12E5:  GOTO   2F5
....................                   {
....................                      while(BACK==0);
12E6:  BSF    03.5
12E7:  BSF    06.3
12E8:  BCF    03.5
12E9:  BTFSS  06.3
12EA:  GOTO   2E6
....................                      xoamanhinh();
12EB:  BCF    0A.4
12EC:  CALL   45C
12ED:  BSF    0A.4
....................                      hienthi_mode(select);
12EE:  MOVF   2B,W
12EF:  MOVWF  46
12F0:  BCF    0A.4
12F1:  CALL   650
12F2:  BSF    0A.4
....................                      break;
12F3:  GOTO   408
....................                   }
12F4:  GOTO   407
....................                   else if(BTN_QUAT==0)
12F5:  BSF    03.5
12F6:  BSF    06.7
12F7:  BCF    03.5
12F8:  BTFSC  06.7
12F9:  GOTO   308
....................                   {
....................                     while(BTN_QUAT==0);
12FA:  BSF    03.5
12FB:  BSF    06.7
12FC:  BCF    03.5
12FD:  BTFSS  06.7
12FE:  GOTO   2FA
....................                     if(flag_manual!=0)
12FF:  MOVF   31,F
1300:  BTFSC  03.2
1301:  GOTO   307
....................                     output_toggle(PIN_B4);
1302:  BSF    03.5
1303:  BCF    06.4
1304:  MOVLW  10
1305:  BCF    03.5
1306:  XORWF  06,F
....................                   }
1307:  GOTO   407
....................                   else if(BTN_DEN==0)
1308:  BSF    03.5
1309:  BSF    06.6
130A:  BCF    03.5
130B:  BTFSC  06.6
130C:  GOTO   31B
....................                   {
....................                     while(BTN_DEN==0);
130D:  BSF    03.5
130E:  BSF    06.6
130F:  BCF    03.5
1310:  BTFSS  06.6
1311:  GOTO   30D
....................                     if(flag_manual!=0)
1312:  MOVF   31,F
1313:  BTFSC  03.2
1314:  GOTO   31A
....................                     output_toggle(PIN_B5);
1315:  BSF    03.5
1316:  BCF    06.5
1317:  MOVLW  20
1318:  BCF    03.5
1319:  XORWF  06,F
....................                   }  
131A:  GOTO   407
....................                   else if(BTN_QUAT2==0)
131B:  BSF    43.0
131C:  MOVF   43,W
131D:  BSF    03.5
131E:  MOVWF  07
131F:  BCF    03.5
1320:  BTFSC  07.0
1321:  GOTO   334
....................                   {
....................                      while(BTN_QUAT2==0);
1322:  BSF    43.0
1323:  MOVF   43,W
1324:  BSF    03.5
1325:  MOVWF  07
1326:  BCF    03.5
1327:  BTFSS  07.0
1328:  GOTO   322
....................                      if(flag_manual!=0)
1329:  MOVF   31,F
132A:  BTFSC  03.2
132B:  GOTO   333
....................                      output_toggle(PIN_C1);
132C:  BCF    43.1
132D:  MOVF   43,W
132E:  BSF    03.5
132F:  MOVWF  07
1330:  MOVLW  02
1331:  BCF    03.5
1332:  XORWF  07,F
....................                   }                  
1333:  GOTO   407
....................                   else if(OK==0 && select == 1)
1334:  BSF    03.5
1335:  BSF    06.2
1336:  BCF    03.5
1337:  BTFSC  06.2
1338:  GOTO   39D
1339:  DECFSZ 2B,W
133A:  GOTO   39D
....................                   {
....................                     while(OK==0);
133B:  BSF    03.5
133C:  BSF    06.2
133D:  BCF    03.5
133E:  BTFSS  06.2
133F:  GOTO   33B
....................                      lcd_gotoxy(1,1);
1340:  MOVLW  01
1341:  MOVWF  54
1342:  MOVWF  55
1343:  BCF    0A.4
1344:  CALL   243
1345:  BSF    0A.4
....................                      printf(lcd_putc,"  -- MANUAL --");                    
1346:  MOVLW  1D
1347:  BSF    03.6
1348:  MOVWF  0D
1349:  MOVLW  01
134A:  MOVWF  0F
134B:  BCF    0A.4
134C:  BCF    03.6
134D:  CALL   28A
134E:  BSF    0A.4
....................                      lcd_gotoxy(1,2);
134F:  MOVLW  01
1350:  MOVWF  54
1351:  MOVLW  02
1352:  MOVWF  55
1353:  BCF    0A.4
1354:  CALL   243
1355:  BSF    0A.4
....................                      printf(lcd_putc,"   READY !!!  ");
1356:  MOVLW  25
1357:  BSF    03.6
1358:  MOVWF  0D
1359:  MOVLW  01
135A:  MOVWF  0F
135B:  BCF    0A.4
135C:  BCF    03.6
135D:  CALL   28A
135E:  BSF    0A.4
....................                      flag_manual =1;
135F:  MOVLW  01
1360:  MOVWF  31
....................                      select = 1;
1361:  MOVWF  2B
....................                      while(TRUE)
....................                      {
....................                          if(BACK==0)
1362:  BSF    03.5
1363:  BSF    06.3
1364:  BCF    03.5
1365:  BTFSC  06.3
1366:  GOTO   376
....................                         {
....................                            while(BACK==0);
1367:  BSF    03.5
1368:  BSF    06.3
1369:  BCF    03.5
136A:  BTFSS  06.3
136B:  GOTO   367
....................                            xoamanhinh();
136C:  BCF    0A.4
136D:  CALL   45C
136E:  BSF    0A.4
....................                            mode_manual(select);
136F:  MOVF   2B,W
1370:  MOVWF  46
1371:  BCF    0A.4
1372:  CALL   670
1373:  BSF    0A.4
....................                            
....................                            break;
1374:  GOTO   39C
....................                         }
1375:  GOTO   39B
....................                         else if(BTN_QUAT==0)
1376:  BSF    03.5
1377:  BSF    06.7
1378:  BCF    03.5
1379:  BTFSC  06.7
137A:  GOTO   389
....................                         {
....................                            while(BTN_QUAT==0);
137B:  BSF    03.5
137C:  BSF    06.7
137D:  BCF    03.5
137E:  BTFSS  06.7
137F:  GOTO   37B
....................                            if(flag_manual!=0)
1380:  MOVF   31,F
1381:  BTFSC  03.2
1382:  GOTO   388
....................                            output_toggle(PIN_B4);
1383:  BSF    03.5
1384:  BCF    06.4
1385:  MOVLW  10
1386:  BCF    03.5
1387:  XORWF  06,F
....................                         }
1388:  GOTO   39B
....................                         else if(BTN_DEN==0)
1389:  BSF    03.5
138A:  BSF    06.6
138B:  BCF    03.5
138C:  BTFSC  06.6
138D:  GOTO   39B
....................                         {
....................                            while(BTN_DEN==0);
138E:  BSF    03.5
138F:  BSF    06.6
1390:  BCF    03.5
1391:  BTFSS  06.6
1392:  GOTO   38E
....................                            if(flag_manual!=0)
1393:  MOVF   31,F
1394:  BTFSC  03.2
1395:  GOTO   39B
....................                            output_toggle(PIN_B5);
1396:  BSF    03.5
1397:  BCF    06.5
1398:  MOVLW  20
1399:  BCF    03.5
139A:  XORWF  06,F
....................                         } 
139B:  GOTO   362
....................                      }
....................                   }     
139C:  GOTO   407
....................                   else if(OK==0 && select == 2)
139D:  BSF    03.5
139E:  BSF    06.2
139F:  BCF    03.5
13A0:  BTFSC  06.2
13A1:  GOTO   407
13A2:  MOVF   2B,W
13A3:  SUBLW  02
13A4:  BTFSS  03.2
13A5:  GOTO   407
....................                   {
....................                      while(OK==0);
13A6:  BSF    03.5
13A7:  BSF    06.2
13A8:  BCF    03.5
13A9:  BTFSS  06.2
13AA:  GOTO   3A6
....................                      lcd_gotoxy(1,1);
13AB:  MOVLW  01
13AC:  MOVWF  54
13AD:  MOVWF  55
13AE:  BCF    0A.4
13AF:  CALL   243
13B0:  BSF    0A.4
....................                      printf(lcd_putc,"  -- MANUAL --");                    
13B1:  MOVLW  2D
13B2:  BSF    03.6
13B3:  MOVWF  0D
13B4:  MOVLW  01
13B5:  MOVWF  0F
13B6:  BCF    0A.4
13B7:  BCF    03.6
13B8:  CALL   28A
13B9:  BSF    0A.4
....................                      lcd_gotoxy(1,2);
13BA:  MOVLW  01
13BB:  MOVWF  54
13BC:  MOVLW  02
13BD:  MOVWF  55
13BE:  BCF    0A.4
13BF:  CALL   243
13C0:  BSF    0A.4
....................                      printf(lcd_putc,"   SHUTDOWN !!!");
13C1:  MOVLW  35
13C2:  BSF    03.6
13C3:  MOVWF  0D
13C4:  MOVLW  01
13C5:  MOVWF  0F
13C6:  BCF    0A.4
13C7:  BCF    03.6
13C8:  CALL   28A
13C9:  BSF    0A.4
....................                      flag_manual =0;
13CA:  CLRF   31
....................                      select = 1;
13CB:  MOVLW  01
13CC:  MOVWF  2B
....................                      while(TRUE)
....................                      {
....................                          if(BACK==0)
13CD:  BSF    03.5
13CE:  BSF    06.3
13CF:  BCF    03.5
13D0:  BTFSC  06.3
13D1:  GOTO   3E1
....................                         {
....................                            while(BACK==0);
13D2:  BSF    03.5
13D3:  BSF    06.3
13D4:  BCF    03.5
13D5:  BTFSS  06.3
13D6:  GOTO   3D2
....................                            xoamanhinh();
13D7:  BCF    0A.4
13D8:  CALL   45C
13D9:  BSF    0A.4
....................                            mode_manual(select);
13DA:  MOVF   2B,W
13DB:  MOVWF  46
13DC:  BCF    0A.4
13DD:  CALL   670
13DE:  BSF    0A.4
....................                            break;
13DF:  GOTO   407
....................                         }
13E0:  GOTO   406
....................                         else if(BTN_QUAT==0)
13E1:  BSF    03.5
13E2:  BSF    06.7
13E3:  BCF    03.5
13E4:  BTFSC  06.7
13E5:  GOTO   3F4
....................                         {
....................                            while(BTN_QUAT==0);
13E6:  BSF    03.5
13E7:  BSF    06.7
13E8:  BCF    03.5
13E9:  BTFSS  06.7
13EA:  GOTO   3E6
....................                            if(flag_manual!=0)
13EB:  MOVF   31,F
13EC:  BTFSC  03.2
13ED:  GOTO   3F3
....................                            output_toggle(PIN_B4);
13EE:  BSF    03.5
13EF:  BCF    06.4
13F0:  MOVLW  10
13F1:  BCF    03.5
13F2:  XORWF  06,F
....................                         }
13F3:  GOTO   406
....................                         else if(BTN_DEN==0)
13F4:  BSF    03.5
13F5:  BSF    06.6
13F6:  BCF    03.5
13F7:  BTFSC  06.6
13F8:  GOTO   406
....................                         {
....................                            while(BTN_DEN==0);
13F9:  BSF    03.5
13FA:  BSF    06.6
13FB:  BCF    03.5
13FC:  BTFSS  06.6
13FD:  GOTO   3F9
....................                            if(flag_manual!=0)
13FE:  MOVF   31,F
13FF:  BTFSC  03.2
1400:  GOTO   406
....................                            output_toggle(PIN_B5);
1401:  BSF    03.5
1402:  BCF    06.5
1403:  MOVLW  20
1404:  BCF    03.5
1405:  XORWF  06,F
....................                         }
1406:  GOTO   3CD
....................                      }                     
....................                   }                  
1407:  GOTO   2AD
....................                }
....................             }
1408:  GOTO   7E8
....................             ////////////AUTO////////////////
....................             else if(OK==0 && select==2)
1409:  BSF    03.5
140A:  BSF    06.2
140B:  BCF    03.5
140C:  BTFSC  06.2
140D:  GOTO   7E8
140E:  MOVF   2B,W
140F:  SUBLW  02
1410:  BTFSS  03.2
1411:  GOTO   7E8
....................             {
....................                while(OK==0);
1412:  BSF    03.5
1413:  BSF    06.2
1414:  BCF    03.5
1415:  BTFSS  06.2
1416:  GOTO   412
....................                xoamanhinh();
1417:  BCF    0A.4
1418:  CALL   45C
1419:  BSF    0A.4
....................                luachon_caidat(select);
141A:  MOVF   2B,W
141B:  MOVWF  46
141C:  BCF    0A.4
141D:  CALL   690
141E:  BSF    0A.4
....................                while(TRUE)
....................                {
....................                   GiatriADC = read_adc();
141F:  BSF    1F.2
1420:  BTFSC  1F.2
1421:  GOTO   420
1422:  MOVF   1E,W
1423:  MOVWF  79
1424:  BSF    03.5
1425:  MOVF   1E,W
1426:  MOVWF  78
1427:  MOVF   79,W
1428:  MOVWF  7A
1429:  MOVF   1E,W
142A:  BCF    03.5
142B:  MOVWF  48
142C:  MOVF   79,W
142D:  MOVWF  49
142E:  BCF    0A.4
142F:  CALL   2E0
1430:  BSF    0A.4
1431:  MOVF   7A,W
1432:  MOVWF  39
1433:  MOVF   79,W
1434:  MOVWF  38
1435:  MOVF   78,W
1436:  MOVWF  37
1437:  MOVF   77,W
1438:  MOVWF  36
....................                   Tam = GiatriADC*5/1023.0f;
1439:  MOVF   39,W
143A:  MOVWF  56
143B:  MOVF   38,W
143C:  MOVWF  55
143D:  MOVF   37,W
143E:  MOVWF  54
143F:  MOVF   36,W
1440:  MOVWF  53
1441:  CLRF   5A
1442:  CLRF   59
1443:  MOVLW  20
1444:  MOVWF  58
1445:  MOVLW  81
1446:  MOVWF  57
1447:  BCF    0A.4
1448:  CALL   2FD
1449:  BSF    0A.4
144A:  MOVF   7A,W
144B:  MOVWF  49
144C:  MOVF   79,W
144D:  MOVWF  48
144E:  MOVF   78,W
144F:  MOVWF  47
1450:  MOVF   77,W
1451:  MOVWF  46
1452:  MOVF   49,W
1453:  MOVWF  4D
1454:  MOVF   48,W
1455:  MOVWF  4C
1456:  MOVF   47,W
1457:  MOVWF  4B
1458:  MOVF   46,W
1459:  MOVWF  4A
145A:  CLRF   51
145B:  MOVLW  C0
145C:  MOVWF  50
145D:  MOVLW  7F
145E:  MOVWF  4F
145F:  MOVLW  88
1460:  MOVWF  4E
1461:  BCF    0A.4
1462:  CALL   372
1463:  BSF    0A.4
1464:  MOVF   7A,W
1465:  MOVWF  35
1466:  MOVF   79,W
1467:  MOVWF  34
1468:  MOVF   78,W
1469:  MOVWF  33
146A:  MOVF   77,W
146B:  MOVWF  32
....................                   Nhietdo = Tam/0.01;
146C:  MOVF   35,W
146D:  MOVWF  4D
146E:  MOVF   34,W
146F:  MOVWF  4C
1470:  MOVF   33,W
1471:  MOVWF  4B
1472:  MOVF   32,W
1473:  MOVWF  4A
1474:  MOVLW  0A
1475:  MOVWF  51
1476:  MOVLW  D7
1477:  MOVWF  50
1478:  MOVLW  23
1479:  MOVWF  4F
147A:  MOVLW  78
147B:  MOVWF  4E
147C:  BCF    0A.4
147D:  CALL   372
147E:  BSF    0A.4
147F:  MOVF   7A,W
1480:  MOVWF  3D
1481:  MOVF   79,W
1482:  MOVWF  3C
1483:  MOVF   78,W
1484:  MOVWF  3B
1485:  MOVF   77,W
1486:  MOVWF  3A
....................                   bat_tat_quat(Nguongnhietdo.TOP,Nguongnhietdo.BOT);
1487:  MOVF   44,W
1488:  MOVWF  46
1489:  MOVF   45,W
148A:  MOVWF  47
148B:  BCF    0A.4
148C:  CALL   6EE
148D:  BSF    0A.4
....................                   if(UP==0)
148E:  BSF    03.5
148F:  BSF    06.0
1490:  BCF    03.5
1491:  BTFSC  06.0
1492:  GOTO   4A5
....................                   {
....................                      while(UP==0);
1493:  BSF    03.5
1494:  BSF    06.0
1495:  BCF    03.5
1496:  BTFSS  06.0
1497:  GOTO   493
....................                      select = (select == 1)? 2: select-1;
1498:  DECFSZ 2B,W
1499:  GOTO   49C
149A:  MOVLW  02
149B:  GOTO   49E
149C:  MOVLW  01
149D:  SUBWF  2B,W
149E:  MOVWF  2B
....................                      luachon_caidat(select);
149F:  MOVF   2B,W
14A0:  MOVWF  46
14A1:  BCF    0A.4
14A2:  CALL   690
14A3:  BSF    0A.4
....................                   }
14A4:  GOTO   7E7
....................                   else if(DOWN==0)
14A5:  BSF    03.5
14A6:  BSF    06.1
14A7:  BCF    03.5
14A8:  BTFSC  06.1
14A9:  GOTO   4BE
....................                   {
....................                      while(DOWN==0);
14AA:  BSF    03.5
14AB:  BSF    06.1
14AC:  BCF    03.5
14AD:  BTFSS  06.1
14AE:  GOTO   4AA
....................                      select = (select == 2)? 1: select+1;
14AF:  MOVF   2B,W
14B0:  SUBLW  02
14B1:  BTFSS  03.2
14B2:  GOTO   4B5
14B3:  MOVLW  01
14B4:  GOTO   4B7
14B5:  MOVLW  01
14B6:  ADDWF  2B,W
14B7:  MOVWF  2B
....................                      luachon_caidat(select);
14B8:  MOVF   2B,W
14B9:  MOVWF  46
14BA:  BCF    0A.4
14BB:  CALL   690
14BC:  BSF    0A.4
....................                   }
14BD:  GOTO   7E7
....................                   else if(BACK==0)
14BE:  BSF    03.5
14BF:  BSF    06.3
14C0:  BCF    03.5
14C1:  BTFSC  06.3
14C2:  GOTO   4D2
....................                   {
....................                      while(BACK==0);
14C3:  BSF    03.5
14C4:  BSF    06.3
14C5:  BCF    03.5
14C6:  BTFSS  06.3
14C7:  GOTO   4C3
....................                      xoamanhinh();
14C8:  BCF    0A.4
14C9:  CALL   45C
14CA:  BSF    0A.4
....................                      hienthi_mode(select);
14CB:  MOVF   2B,W
14CC:  MOVWF  46
14CD:  BCF    0A.4
14CE:  CALL   650
14CF:  BSF    0A.4
....................                      break;
14D0:  GOTO   7E8
....................                   }
14D1:  GOTO   7E7
....................                   ////////////////FAN/////////////////
....................                   else if(OK==0 && select == 1)
14D2:  BSF    03.5
14D3:  BSF    06.2
14D4:  BCF    03.5
14D5:  BTFSC  06.2
14D6:  GOTO   695
14D7:  DECFSZ 2B,W
14D8:  GOTO   695
....................                   {
....................                      while(OK==0);
14D9:  BSF    03.5
14DA:  BSF    06.2
14DB:  BCF    03.5
14DC:  BTFSS  06.2
14DD:  GOTO   4D9
....................                      xoamanhinh();
14DE:  BCF    0A.4
14DF:  CALL   45C
14E0:  BSF    0A.4
....................                      caidat_fan(select);
14E1:  MOVF   2B,W
14E2:  MOVWF  46
14E3:  BCF    0A.4
14E4:  CALL   76B
14E5:  BSF    0A.4
....................                      lcd_gotoxy(12, 1);
14E6:  MOVLW  0C
14E7:  MOVWF  54
14E8:  MOVLW  01
14E9:  MOVWF  55
14EA:  BCF    0A.4
14EB:  CALL   243
14EC:  BSF    0A.4
....................                      printf(lcd_putc,"%3d",Nguongnhietdo.TOP);
14ED:  MOVF   44,W
14EE:  MOVWF  46
14EF:  MOVLW  13
14F0:  MOVWF  47
14F1:  BCF    0A.4
14F2:  CALL   7A0
14F3:  BSF    0A.4
....................                      lcd_gotoxy(12, 2);
14F4:  MOVLW  0C
14F5:  MOVWF  54
14F6:  MOVLW  02
14F7:  MOVWF  55
14F8:  BCF    0A.4
14F9:  CALL   243
14FA:  BSF    0A.4
....................                      printf(lcd_putc,"%3d",Nguongnhietdo.BOT);   
14FB:  MOVF   45,W
14FC:  MOVWF  46
14FD:  MOVLW  13
14FE:  MOVWF  47
14FF:  BCF    0A.4
1500:  CALL   7A0
1501:  BSF    0A.4
....................                      while(TRUE)
....................                      {
....................                         GiatriADC = read_adc();
1502:  BSF    1F.2
1503:  BTFSC  1F.2
1504:  GOTO   503
1505:  MOVF   1E,W
1506:  MOVWF  79
1507:  BSF    03.5
1508:  MOVF   1E,W
1509:  MOVWF  78
150A:  MOVF   79,W
150B:  MOVWF  7A
150C:  MOVF   1E,W
150D:  BCF    03.5
150E:  MOVWF  48
150F:  MOVF   79,W
1510:  MOVWF  49
1511:  BCF    0A.4
1512:  CALL   2E0
1513:  BSF    0A.4
1514:  MOVF   7A,W
1515:  MOVWF  39
1516:  MOVF   79,W
1517:  MOVWF  38
1518:  MOVF   78,W
1519:  MOVWF  37
151A:  MOVF   77,W
151B:  MOVWF  36
....................                         Tam = GiatriADC*5/1023.0f;
151C:  MOVF   39,W
151D:  MOVWF  56
151E:  MOVF   38,W
151F:  MOVWF  55
1520:  MOVF   37,W
1521:  MOVWF  54
1522:  MOVF   36,W
1523:  MOVWF  53
1524:  CLRF   5A
1525:  CLRF   59
1526:  MOVLW  20
1527:  MOVWF  58
1528:  MOVLW  81
1529:  MOVWF  57
152A:  BCF    0A.4
152B:  CALL   2FD
152C:  BSF    0A.4
152D:  MOVF   7A,W
152E:  MOVWF  49
152F:  MOVF   79,W
1530:  MOVWF  48
1531:  MOVF   78,W
1532:  MOVWF  47
1533:  MOVF   77,W
1534:  MOVWF  46
1535:  MOVF   49,W
1536:  MOVWF  4D
1537:  MOVF   48,W
1538:  MOVWF  4C
1539:  MOVF   47,W
153A:  MOVWF  4B
153B:  MOVF   46,W
153C:  MOVWF  4A
153D:  CLRF   51
153E:  MOVLW  C0
153F:  MOVWF  50
1540:  MOVLW  7F
1541:  MOVWF  4F
1542:  MOVLW  88
1543:  MOVWF  4E
1544:  BCF    0A.4
1545:  CALL   372
1546:  BSF    0A.4
1547:  MOVF   7A,W
1548:  MOVWF  35
1549:  MOVF   79,W
154A:  MOVWF  34
154B:  MOVF   78,W
154C:  MOVWF  33
154D:  MOVF   77,W
154E:  MOVWF  32
....................                         Nhietdo = Tam/0.01;
154F:  MOVF   35,W
1550:  MOVWF  4D
1551:  MOVF   34,W
1552:  MOVWF  4C
1553:  MOVF   33,W
1554:  MOVWF  4B
1555:  MOVF   32,W
1556:  MOVWF  4A
1557:  MOVLW  0A
1558:  MOVWF  51
1559:  MOVLW  D7
155A:  MOVWF  50
155B:  MOVLW  23
155C:  MOVWF  4F
155D:  MOVLW  78
155E:  MOVWF  4E
155F:  BCF    0A.4
1560:  CALL   372
1561:  BSF    0A.4
1562:  MOVF   7A,W
1563:  MOVWF  3D
1564:  MOVF   79,W
1565:  MOVWF  3C
1566:  MOVF   78,W
1567:  MOVWF  3B
1568:  MOVF   77,W
1569:  MOVWF  3A
....................                         bat_tat_quat(Nguongnhietdo.TOP,Nguongnhietdo.BOT);
156A:  MOVF   44,W
156B:  MOVWF  46
156C:  MOVF   45,W
156D:  MOVWF  47
156E:  BCF    0A.4
156F:  CALL   6EE
1570:  BSF    0A.4
....................                         if(UP==0)
1571:  BSF    03.5
1572:  BSF    06.0
1573:  BCF    03.5
1574:  BTFSC  06.0
1575:  GOTO   588
....................                         {
....................                            while(UP==0);
1576:  BSF    03.5
1577:  BSF    06.0
1578:  BCF    03.5
1579:  BTFSS  06.0
157A:  GOTO   576
....................                            select = (select == 1)? 2: select-1;
157B:  DECFSZ 2B,W
157C:  GOTO   57F
157D:  MOVLW  02
157E:  GOTO   581
157F:  MOVLW  01
1580:  SUBWF  2B,W
1581:  MOVWF  2B
....................                            caidat_fan(select);
1582:  MOVF   2B,W
1583:  MOVWF  46
1584:  BCF    0A.4
1585:  CALL   76B
1586:  BSF    0A.4
....................                         }
1587:  GOTO   5A0
....................                         else if(DOWN==0)
1588:  BSF    03.5
1589:  BSF    06.1
158A:  BCF    03.5
158B:  BTFSC  06.1
158C:  GOTO   5A0
....................                         {
....................                            while(DOWN==0);
158D:  BSF    03.5
158E:  BSF    06.1
158F:  BCF    03.5
1590:  BTFSS  06.1
1591:  GOTO   58D
....................                            select = (select == 2)? 1: select+1;
1592:  MOVF   2B,W
1593:  SUBLW  02
1594:  BTFSS  03.2
1595:  GOTO   598
1596:  MOVLW  01
1597:  GOTO   59A
1598:  MOVLW  01
1599:  ADDWF  2B,W
159A:  MOVWF  2B
....................                            caidat_fan(select);
159B:  MOVF   2B,W
159C:  MOVWF  46
159D:  BCF    0A.4
159E:  CALL   76B
159F:  BSF    0A.4
....................                         }                        
....................                         if(OK==0 && select == 1)  //CHONTOP
15A0:  BSF    03.5
15A1:  BSF    06.2
15A2:  BCF    03.5
15A3:  BTFSC  06.2
15A4:  GOTO   60F
15A5:  DECFSZ 2B,W
15A6:  GOTO   60F
....................                         {
....................                            while(OK==0);
15A7:  BSF    03.5
15A8:  BSF    06.2
15A9:  BCF    03.5
15AA:  BTFSS  06.2
15AB:  GOTO   5A7
....................                            lcd_gotoxy(16, 1);
15AC:  MOVLW  10
15AD:  MOVWF  54
15AE:  MOVLW  01
15AF:  MOVWF  55
15B0:  BCF    0A.4
15B1:  CALL   243
15B2:  BSF    0A.4
....................                            lcd_putc("*");
15B3:  MOVLW  3D
15B4:  BSF    03.6
15B5:  MOVWF  0D
15B6:  MOVLW  01
15B7:  MOVWF  0F
15B8:  BCF    0A.4
15B9:  BCF    03.6
15BA:  CALL   28A
15BB:  BSF    0A.4
....................                            while(TRUE)
....................                            {
....................                               if(UP==0)
15BC:  BSF    03.5
15BD:  BSF    06.0
15BE:  BCF    03.5
15BF:  BTFSC  06.0
15C0:  GOTO   5D7
....................                               {
....................                                  while(UP==0);
15C1:  BSF    03.5
15C2:  BSF    06.0
15C3:  BCF    03.5
15C4:  BTFSS  06.0
15C5:  GOTO   5C1
....................                                   lcd_gotoxy(12, 1);
15C6:  MOVLW  0C
15C7:  MOVWF  54
15C8:  MOVLW  01
15C9:  MOVWF  55
15CA:  BCF    0A.4
15CB:  CALL   243
15CC:  BSF    0A.4
....................                                   printf(lcd_putc,"%3d",Nguongnhietdo.TOP  = Nguongnhietdo.TOP +1);
15CD:  MOVLW  01
15CE:  ADDWF  44,F
15CF:  MOVF   44,W
15D0:  MOVWF  46
15D1:  MOVLW  13
15D2:  MOVWF  47
15D3:  BCF    0A.4
15D4:  CALL   7A0
15D5:  BSF    0A.4
....................                               }
15D6:  GOTO   60D
....................                               else if(DOWN==0)
15D7:  BSF    03.5
15D8:  BSF    06.1
15D9:  BCF    03.5
15DA:  BTFSC  06.1
15DB:  GOTO   5F2
....................                               {
....................                                  while(DOWN==0);
15DC:  BSF    03.5
15DD:  BSF    06.1
15DE:  BCF    03.5
15DF:  BTFSS  06.1
15E0:  GOTO   5DC
....................                                   lcd_gotoxy(12, 1);
15E1:  MOVLW  0C
15E2:  MOVWF  54
15E3:  MOVLW  01
15E4:  MOVWF  55
15E5:  BCF    0A.4
15E6:  CALL   243
15E7:  BSF    0A.4
....................                                   printf(lcd_putc,"%3d",Nguongnhietdo.TOP  = Nguongnhietdo.TOP -1);
15E8:  MOVLW  01
15E9:  SUBWF  44,F
15EA:  MOVF   44,W
15EB:  MOVWF  46
15EC:  MOVLW  13
15ED:  MOVWF  47
15EE:  BCF    0A.4
15EF:  CALL   7A0
15F0:  BSF    0A.4
....................                               }
15F1:  GOTO   60D
....................                               else if(OK==0)
15F2:  BSF    03.5
15F3:  BSF    06.2
15F4:  BCF    03.5
15F5:  BTFSC  06.2
15F6:  GOTO   60D
....................                               {
....................                                  while(OK==0);
15F7:  BSF    03.5
15F8:  BSF    06.2
15F9:  BCF    03.5
15FA:  BTFSS  06.2
15FB:  GOTO   5F7
....................                                  lcd_gotoxy(16, 1);
15FC:  MOVLW  10
15FD:  MOVWF  54
15FE:  MOVLW  01
15FF:  MOVWF  55
1600:  BCF    0A.4
1601:  CALL   243
1602:  BSF    0A.4
....................                                  lcd_putc(" ");
1603:  MOVLW  3E
1604:  BSF    03.6
1605:  MOVWF  0D
1606:  MOVLW  01
1607:  MOVWF  0F
1608:  BCF    0A.4
1609:  BCF    03.6
160A:  CALL   28A
160B:  BSF    0A.4
....................                                  break;     
160C:  GOTO   60E
....................                               }
160D:  GOTO   5BC
....................                            }
....................                         }
160E:  GOTO   693
....................                         else if(OK==0 && select == 2) //CHONBOT
160F:  BSF    03.5
1610:  BSF    06.2
1611:  BCF    03.5
1612:  BTFSC  06.2
1613:  GOTO   680
1614:  MOVF   2B,W
1615:  SUBLW  02
1616:  BTFSS  03.2
1617:  GOTO   680
....................                         {
....................                            while(OK==0);
1618:  BSF    03.5
1619:  BSF    06.2
161A:  BCF    03.5
161B:  BTFSS  06.2
161C:  GOTO   618
....................                            lcd_gotoxy(16, 2);
161D:  MOVLW  10
161E:  MOVWF  54
161F:  MOVLW  02
1620:  MOVWF  55
1621:  BCF    0A.4
1622:  CALL   243
1623:  BSF    0A.4
....................                            lcd_putc("*");
1624:  MOVLW  3F
1625:  BSF    03.6
1626:  MOVWF  0D
1627:  MOVLW  01
1628:  MOVWF  0F
1629:  BCF    0A.4
162A:  BCF    03.6
162B:  CALL   28A
162C:  BSF    0A.4
....................                            while(TRUE)
....................                            {
....................                               if(UP==0)
162D:  BSF    03.5
162E:  BSF    06.0
162F:  BCF    03.5
1630:  BTFSC  06.0
1631:  GOTO   648
....................                               {
....................                                  while(UP==0);
1632:  BSF    03.5
1633:  BSF    06.0
1634:  BCF    03.5
1635:  BTFSS  06.0
1636:  GOTO   632
....................                                   lcd_gotoxy(12, 2);
1637:  MOVLW  0C
1638:  MOVWF  54
1639:  MOVLW  02
163A:  MOVWF  55
163B:  BCF    0A.4
163C:  CALL   243
163D:  BSF    0A.4
....................                                   printf(lcd_putc,"%3d",Nguongnhietdo.BOT  = Nguongnhietdo.BOT +1);
163E:  MOVLW  01
163F:  ADDWF  45,F
1640:  MOVF   45,W
1641:  MOVWF  46
1642:  MOVLW  13
1643:  MOVWF  47
1644:  BCF    0A.4
1645:  CALL   7A0
1646:  BSF    0A.4
....................                               }
1647:  GOTO   67E
....................                               else if(DOWN==0)
1648:  BSF    03.5
1649:  BSF    06.1
164A:  BCF    03.5
164B:  BTFSC  06.1
164C:  GOTO   663
....................                               {
....................                                  while(DOWN==0);
164D:  BSF    03.5
164E:  BSF    06.1
164F:  BCF    03.5
1650:  BTFSS  06.1
1651:  GOTO   64D
....................                                   lcd_gotoxy(12, 2);
1652:  MOVLW  0C
1653:  MOVWF  54
1654:  MOVLW  02
1655:  MOVWF  55
1656:  BCF    0A.4
1657:  CALL   243
1658:  BSF    0A.4
....................                                   printf(lcd_putc,"%3d",Nguongnhietdo.BOT  = Nguongnhietdo.BOT -1);
1659:  MOVLW  01
165A:  SUBWF  45,F
165B:  MOVF   45,W
165C:  MOVWF  46
165D:  MOVLW  13
165E:  MOVWF  47
165F:  BCF    0A.4
1660:  CALL   7A0
1661:  BSF    0A.4
....................                               } 
1662:  GOTO   67E
....................                               else if(OK==0)
1663:  BSF    03.5
1664:  BSF    06.2
1665:  BCF    03.5
1666:  BTFSC  06.2
1667:  GOTO   67E
....................                               {
....................                                  while(OK==0);
1668:  BSF    03.5
1669:  BSF    06.2
166A:  BCF    03.5
166B:  BTFSS  06.2
166C:  GOTO   668
....................                                  lcd_gotoxy(16, 2);
166D:  MOVLW  10
166E:  MOVWF  54
166F:  MOVLW  02
1670:  MOVWF  55
1671:  BCF    0A.4
1672:  CALL   243
1673:  BSF    0A.4
....................                                  lcd_putc(" ");
1674:  MOVLW  40
1675:  BSF    03.6
1676:  MOVWF  0D
1677:  MOVLW  01
1678:  MOVWF  0F
1679:  BCF    0A.4
167A:  BCF    03.6
167B:  CALL   28A
167C:  BSF    0A.4
....................                                  break;
167D:  GOTO   67F
....................                               }
167E:  GOTO   62D
....................                            }                           
....................                         }
167F:  GOTO   693
....................                         else if(BACK==0)
1680:  BSF    03.5
1681:  BSF    06.3
1682:  BCF    03.5
1683:  BTFSC  06.3
1684:  GOTO   693
....................                         {
....................                            while(BACK==0);
1685:  BSF    03.5
1686:  BSF    06.3
1687:  BCF    03.5
1688:  BTFSS  06.3
1689:  GOTO   685
....................                            xoamanhinh();
168A:  BCF    0A.4
168B:  CALL   45C
168C:  BSF    0A.4
....................                            luachon_caidat(select);
168D:  MOVF   2B,W
168E:  MOVWF  46
168F:  BCF    0A.4
1690:  CALL   690
1691:  BSF    0A.4
....................                            break;
1692:  GOTO   694
....................                         }                        
1693:  GOTO   502
....................                      }
....................                   }
1694:  GOTO   7E7
....................                   ////////////////LIGHT/////////////////
....................                   else if(OK==0 && select == 2)
1695:  BSF    03.5
1696:  BSF    06.2
1697:  BCF    03.5
1698:  BTFSC  06.2
1699:  GOTO   7E7
169A:  MOVF   2B,W
169B:  SUBLW  02
169C:  BTFSS  03.2
169D:  GOTO   7E7
....................                   {
....................                      while(OK==0);
169E:  BSF    03.5
169F:  BSF    06.2
16A0:  BCF    03.5
16A1:  BTFSS  06.2
16A2:  GOTO   69E
....................                      xoamanhinh();
16A3:  BCF    0A.4
16A4:  CALL   45C
16A5:  BSF    0A.4
....................                      caidat_light(select);
16A6:  MOVF   2B,W
16A7:  MOVWF  46
16A8:  BCF    0A.4
16A9:  BSF    0A.3
16AA:  CALL   000
16AB:  BSF    0A.4
16AC:  BCF    0A.3
....................                      lcd_gotoxy(10, 2);
16AD:  MOVLW  0A
16AE:  MOVWF  54
16AF:  MOVLW  02
16B0:  MOVWF  55
16B1:  BCF    0A.4
16B2:  CALL   243
16B3:  BSF    0A.4
....................                      printf(lcd_putc,"%3d",time_light);
16B4:  MOVF   2E,W
16B5:  MOVWF  46
16B6:  MOVLW  13
16B7:  MOVWF  47
16B8:  BCF    0A.4
16B9:  CALL   7A0
16BA:  BSF    0A.4
....................                      flag_dasetup = 0;
16BB:  CLRF   2F
....................                      while(TRUE)
....................                      {
....................                         GiatriADC = read_adc();
16BC:  BSF    1F.2
16BD:  BTFSC  1F.2
16BE:  GOTO   6BD
16BF:  MOVF   1E,W
16C0:  MOVWF  79
16C1:  BSF    03.5
16C2:  MOVF   1E,W
16C3:  MOVWF  78
16C4:  MOVF   79,W
16C5:  MOVWF  7A
16C6:  MOVF   1E,W
16C7:  BCF    03.5
16C8:  MOVWF  48
16C9:  MOVF   79,W
16CA:  MOVWF  49
16CB:  BCF    0A.4
16CC:  CALL   2E0
16CD:  BSF    0A.4
16CE:  MOVF   7A,W
16CF:  MOVWF  39
16D0:  MOVF   79,W
16D1:  MOVWF  38
16D2:  MOVF   78,W
16D3:  MOVWF  37
16D4:  MOVF   77,W
16D5:  MOVWF  36
....................                         Tam = GiatriADC*5/1023.0f;
16D6:  MOVF   39,W
16D7:  MOVWF  56
16D8:  MOVF   38,W
16D9:  MOVWF  55
16DA:  MOVF   37,W
16DB:  MOVWF  54
16DC:  MOVF   36,W
16DD:  MOVWF  53
16DE:  CLRF   5A
16DF:  CLRF   59
16E0:  MOVLW  20
16E1:  MOVWF  58
16E2:  MOVLW  81
16E3:  MOVWF  57
16E4:  BCF    0A.4
16E5:  CALL   2FD
16E6:  BSF    0A.4
16E7:  MOVF   7A,W
16E8:  MOVWF  49
16E9:  MOVF   79,W
16EA:  MOVWF  48
16EB:  MOVF   78,W
16EC:  MOVWF  47
16ED:  MOVF   77,W
16EE:  MOVWF  46
16EF:  MOVF   49,W
16F0:  MOVWF  4D
16F1:  MOVF   48,W
16F2:  MOVWF  4C
16F3:  MOVF   47,W
16F4:  MOVWF  4B
16F5:  MOVF   46,W
16F6:  MOVWF  4A
16F7:  CLRF   51
16F8:  MOVLW  C0
16F9:  MOVWF  50
16FA:  MOVLW  7F
16FB:  MOVWF  4F
16FC:  MOVLW  88
16FD:  MOVWF  4E
16FE:  BCF    0A.4
16FF:  CALL   372
1700:  BSF    0A.4
1701:  MOVF   7A,W
1702:  MOVWF  35
1703:  MOVF   79,W
1704:  MOVWF  34
1705:  MOVF   78,W
1706:  MOVWF  33
1707:  MOVF   77,W
1708:  MOVWF  32
....................                         Nhietdo = Tam/0.01;
1709:  MOVF   35,W
170A:  MOVWF  4D
170B:  MOVF   34,W
170C:  MOVWF  4C
170D:  MOVF   33,W
170E:  MOVWF  4B
170F:  MOVF   32,W
1710:  MOVWF  4A
1711:  MOVLW  0A
1712:  MOVWF  51
1713:  MOVLW  D7
1714:  MOVWF  50
1715:  MOVLW  23
1716:  MOVWF  4F
1717:  MOVLW  78
1718:  MOVWF  4E
1719:  BCF    0A.4
171A:  CALL   372
171B:  BSF    0A.4
171C:  MOVF   7A,W
171D:  MOVWF  3D
171E:  MOVF   79,W
171F:  MOVWF  3C
1720:  MOVF   78,W
1721:  MOVWF  3B
1722:  MOVF   77,W
1723:  MOVWF  3A
....................                         if(Nhietdo>Nguongnhietdo.TOP || Nhietdo <Nguongnhietdo.BOT)
1724:  CLRF   49
1725:  MOVF   44,W
1726:  MOVWF  48
1727:  BCF    0A.4
1728:  CALL   2E0
1729:  BSF    0A.4
172A:  MOVF   7A,W
172B:  MOVWF  4B
172C:  MOVF   79,W
172D:  MOVWF  4A
172E:  MOVF   78,W
172F:  MOVWF  49
1730:  MOVF   77,W
1731:  MOVWF  48
1732:  MOVF   3D,W
1733:  MOVWF  4F
1734:  MOVF   3C,W
1735:  MOVWF  4E
1736:  MOVF   3B,W
1737:  MOVWF  4D
1738:  MOVF   3A,W
1739:  MOVWF  4C
173A:  BCF    0A.4
173B:  CALL   6AF
173C:  BSF    0A.4
173D:  BTFSC  03.0
173E:  GOTO   75A
173F:  CLRF   49
1740:  MOVF   45,W
1741:  MOVWF  48
1742:  BCF    0A.4
1743:  CALL   2E0
1744:  BSF    0A.4
1745:  MOVF   3D,W
1746:  MOVWF  4B
1747:  MOVF   3C,W
1748:  MOVWF  4A
1749:  MOVF   3B,W
174A:  MOVWF  49
174B:  MOVF   3A,W
174C:  MOVWF  48
174D:  MOVF   7A,W
174E:  MOVWF  4F
174F:  MOVF   79,W
1750:  MOVWF  4E
1751:  MOVF   78,W
1752:  MOVWF  4D
1753:  MOVF   77,W
1754:  MOVWF  4C
1755:  BCF    0A.4
1756:  CALL   6AF
1757:  BSF    0A.4
1758:  BTFSS  03.0
1759:  GOTO   75F
....................                         {
....................                            output_high(PIN_B4);
175A:  BSF    03.5
175B:  BCF    06.4
175C:  BCF    03.5
175D:  BSF    06.4
....................                         }
175E:  GOTO   763
....................                         else
....................                         output_low(PIN_B4);                     
175F:  BSF    03.5
1760:  BCF    06.4
1761:  BCF    03.5
1762:  BCF    06.4
....................                         if(UP==0)
1763:  BSF    03.5
1764:  BSF    06.0
1765:  BCF    03.5
1766:  BTFSC  06.0
1767:  GOTO   77E
....................                         {
....................                            while(UP==0);
1768:  BSF    03.5
1769:  BSF    06.0
176A:  BCF    03.5
176B:  BTFSS  06.0
176C:  GOTO   768
....................                             lcd_gotoxy(10, 2);
176D:  MOVLW  0A
176E:  MOVWF  54
176F:  MOVLW  02
1770:  MOVWF  55
1771:  BCF    0A.4
1772:  CALL   243
1773:  BSF    0A.4
....................                             printf(lcd_putc,"%3d",time_light = time_light+1);
1774:  MOVLW  01
1775:  ADDWF  2E,F
1776:  MOVF   2E,W
1777:  MOVWF  46
1778:  MOVLW  13
1779:  MOVWF  47
177A:  BCF    0A.4
177B:  CALL   7A0
177C:  BSF    0A.4
....................                         }
177D:  GOTO   7E6
....................                         else if(DOWN==0)
177E:  BSF    03.5
177F:  BSF    06.1
1780:  BCF    03.5
1781:  BTFSC  06.1
1782:  GOTO   799
....................                         {
....................                            while(DOWN==0);
1783:  BSF    03.5
1784:  BSF    06.1
1785:  BCF    03.5
1786:  BTFSS  06.1
1787:  GOTO   783
....................                             lcd_gotoxy(10, 2);
1788:  MOVLW  0A
1789:  MOVWF  54
178A:  MOVLW  02
178B:  MOVWF  55
178C:  BCF    0A.4
178D:  CALL   243
178E:  BSF    0A.4
....................                             printf(lcd_putc,"%3d",time_light = time_light-1);
178F:  MOVLW  01
1790:  SUBWF  2E,F
1791:  MOVF   2E,W
1792:  MOVWF  46
1793:  MOVLW  13
1794:  MOVWF  47
1795:  BCF    0A.4
1796:  CALL   7A0
1797:  BSF    0A.4
....................                         }        
1798:  GOTO   7E6
....................                         else if(OK==0)
1799:  BSF    03.5
179A:  BSF    06.2
179B:  BCF    03.5
179C:  BTFSC  06.2
179D:  GOTO   7B2
....................                         {
....................                            while(OK==0);
179E:  BSF    03.5
179F:  BSF    06.2
17A0:  BCF    03.5
17A1:  BTFSS  06.2
17A2:  GOTO   79E
....................                            caidat_light(select);
17A3:  MOVF   2B,W
17A4:  MOVWF  46
17A5:  BCF    0A.4
17A6:  BSF    0A.3
17A7:  CALL   000
17A8:  BSF    0A.4
17A9:  BCF    0A.3
....................                            bien_light = time_light;
17AA:  MOVF   2E,W
17AB:  MOVWF  41
....................                            timerbatquat_batden();
17AC:  BCF    0A.4
17AD:  GOTO   7F7
17AE:  BSF    0A.4
....................                            flag = 1;
17AF:  MOVLW  01
17B0:  MOVWF  30
....................                         }
17B1:  GOTO   7E6
....................                         else if(time1==100 && flag ==1)  //1s
17B2:  MOVF   2D,W
17B3:  SUBLW  64
17B4:  BTFSS  03.2
17B5:  GOTO   7D1
17B6:  DECFSZ 30,W
17B7:  GOTO   7D1
....................                          {
....................                            dem1=dem1+1;
17B8:  MOVLW  01
17B9:  ADDWF  40,F
....................                            time1 = 0;
17BA:  CLRF   2D
....................                            lcd_gotoxy(10, 2);
17BB:  MOVLW  0A
17BC:  MOVWF  54
17BD:  MOVLW  02
17BE:  MOVWF  55
17BF:  BCF    0A.4
17C0:  CALL   243
17C1:  BSF    0A.4
....................                            printf(lcd_putc,"%3d",time_light = (time_light>0) ? time_light-1 : 0);  
17C2:  MOVF   2E,F
17C3:  BTFSC  03.2
17C4:  GOTO   7C8
17C5:  MOVLW  01
17C6:  SUBWF  2E,W
17C7:  GOTO   7C9
17C8:  MOVLW  00
17C9:  MOVWF  2E
17CA:  MOVWF  46
17CB:  MOVLW  13
17CC:  MOVWF  47
17CD:  BCF    0A.4
17CE:  CALL   7A0
17CF:  BSF    0A.4
....................                         }                        
17D0:  GOTO   7E6
....................                         else if(BACK==0)
17D1:  BSF    03.5
17D2:  BSF    06.3
17D3:  BCF    03.5
17D4:  BTFSC  06.3
17D5:  GOTO   7E6
....................                         {
....................                            while(BACK==0);
17D6:  BSF    03.5
17D7:  BSF    06.3
17D8:  BCF    03.5
17D9:  BTFSS  06.3
17DA:  GOTO   7D6
....................                            xoamanhinh();
17DB:  BCF    0A.4
17DC:  CALL   45C
17DD:  BSF    0A.4
....................                            luachon_caidat(select);
17DE:  MOVF   2B,W
17DF:  MOVWF  46
17E0:  BCF    0A.4
17E1:  CALL   690
17E2:  BSF    0A.4
....................                            flag_dasetup = 1;     
17E3:  MOVLW  01
17E4:  MOVWF  2F
....................                            break;
17E5:  GOTO   7E7
....................                         }
17E6:  GOTO   6BC
....................                      }
....................                   }
17E7:  GOTO   41F
....................                }            
....................             }
17E8:  GOTO   219
....................          }
....................       } 
17E9:  GOTO   072
....................    } 
.................... }
17EA:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
